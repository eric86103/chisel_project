;buildInfoPackage: chisel3, version: 3.1.3, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-09-12 19:37:29.007, builtAtMillis: 1536781049007
circuit PipelineMac : 
  module PPGenerator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module PPGenerator_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}
    
    wire pp1_tmp : UInt<9> @[PPGenerator.scala 22:21]
    wire pp2_tmp : UInt<9> @[PPGenerator.scala 23:21]
    node _T_47 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:38]
    node _T_49 = eq(_T_47, UInt<2>("h03")) @[PPGenerator.scala 25:44]
    node _T_52 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_53 = bits(io.in.weight.grps[1], 1, 0) @[PPGenerator.scala 25:117]
    node _T_54 = dshl(_T_52, _T_53) @[PPGenerator.scala 25:94]
    node _T_55 = shl(_T_54, 3) @[PPGenerator.scala 25:123]
    node _T_56 = mux(_T_49, UInt<1>("h00"), _T_55) @[PPGenerator.scala 25:17]
    pp1_tmp <= _T_56 @[PPGenerator.scala 25:11]
    node _T_57 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:38]
    node _T_59 = eq(_T_57, UInt<2>("h03")) @[PPGenerator.scala 26:44]
    node _T_62 = cat(UInt<1>("h01"), io.in.input.mantissa) @[Cat.scala 30:58]
    node _T_63 = bits(io.in.weight.grps[0], 1, 0) @[PPGenerator.scala 26:117]
    node _T_64 = dshl(_T_62, _T_63) @[PPGenerator.scala 26:94]
    node _T_65 = mux(_T_59, UInt<1>("h00"), _T_64) @[PPGenerator.scala 26:17]
    pp2_tmp <= _T_65 @[PPGenerator.scala 26:11]
    node _T_66 = bits(io.in.weight.grps[1], 2, 2) @[PPGenerator.scala 28:61]
    node _T_67 = xor(io.in.input.sign, _T_66) @[PPGenerator.scala 28:39]
    node _T_68 = cat(_T_67, pp1_tmp) @[Cat.scala 30:58]
    io.out.pp_1 <= _T_68 @[PPGenerator.scala 28:15]
    node _T_69 = bits(io.in.weight.grps[0], 2, 2) @[PPGenerator.scala 29:61]
    node _T_70 = xor(io.in.input.sign, _T_69) @[PPGenerator.scala 29:39]
    node _T_71 = cat(_T_70, pp2_tmp) @[Cat.scala 30:58]
    io.out.pp_2 <= _T_71 @[PPGenerator.scala 29:15]
    node _T_72 = add(io.in.input.exponent, io.in.weight.exponent) @[PPGenerator.scala 30:43]
    io.out.exponent <= _T_72 @[PPGenerator.scala 30:19]
    
  module Max_exp_determ : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip skip : UInt<9>, flip exp : UInt<9>[9]}, out : {max_exp : UInt<9>, debug : UInt<9>}}
    
    wire exp_tmp : UInt<9>[9] @[max_exp.scala 20:23]
    wire wire1_1 : UInt<9> @[max_exp.scala 22:23]
    wire wire1_2 : UInt<9> @[max_exp.scala 23:23]
    wire wire1_3 : UInt<9> @[max_exp.scala 24:23]
    wire wire1_4 : UInt<9> @[max_exp.scala 25:23]
    wire wire2_1 : UInt<9> @[max_exp.scala 26:23]
    wire wire2_2 : UInt<9> @[max_exp.scala 27:23]
    wire wire3_1 : UInt<9> @[max_exp.scala 28:23]
    node _T_60 = bits(io.in.skip, 8, 8) @[max_exp.scala 31:37]
    node _T_62 = mux(_T_60, UInt<9>("h00"), io.in.exp[0]) @[max_exp.scala 31:26]
    exp_tmp[0] <= _T_62 @[max_exp.scala 31:20]
    node _T_63 = bits(io.in.skip, 7, 7) @[max_exp.scala 31:37]
    node _T_65 = mux(_T_63, UInt<9>("h00"), io.in.exp[1]) @[max_exp.scala 31:26]
    exp_tmp[1] <= _T_65 @[max_exp.scala 31:20]
    node _T_66 = bits(io.in.skip, 6, 6) @[max_exp.scala 31:37]
    node _T_68 = mux(_T_66, UInt<9>("h00"), io.in.exp[2]) @[max_exp.scala 31:26]
    exp_tmp[2] <= _T_68 @[max_exp.scala 31:20]
    node _T_69 = bits(io.in.skip, 5, 5) @[max_exp.scala 31:37]
    node _T_71 = mux(_T_69, UInt<9>("h00"), io.in.exp[3]) @[max_exp.scala 31:26]
    exp_tmp[3] <= _T_71 @[max_exp.scala 31:20]
    node _T_72 = bits(io.in.skip, 4, 4) @[max_exp.scala 31:37]
    node _T_74 = mux(_T_72, UInt<9>("h00"), io.in.exp[4]) @[max_exp.scala 31:26]
    exp_tmp[4] <= _T_74 @[max_exp.scala 31:20]
    node _T_75 = bits(io.in.skip, 3, 3) @[max_exp.scala 31:37]
    node _T_77 = mux(_T_75, UInt<9>("h00"), io.in.exp[5]) @[max_exp.scala 31:26]
    exp_tmp[5] <= _T_77 @[max_exp.scala 31:20]
    node _T_78 = bits(io.in.skip, 2, 2) @[max_exp.scala 31:37]
    node _T_80 = mux(_T_78, UInt<9>("h00"), io.in.exp[6]) @[max_exp.scala 31:26]
    exp_tmp[6] <= _T_80 @[max_exp.scala 31:20]
    node _T_81 = bits(io.in.skip, 1, 1) @[max_exp.scala 31:37]
    node _T_83 = mux(_T_81, UInt<9>("h00"), io.in.exp[7]) @[max_exp.scala 31:26]
    exp_tmp[7] <= _T_83 @[max_exp.scala 31:20]
    node _T_84 = bits(io.in.skip, 0, 0) @[max_exp.scala 31:37]
    node _T_86 = mux(_T_84, UInt<9>("h00"), io.in.exp[8]) @[max_exp.scala 31:26]
    exp_tmp[8] <= _T_86 @[max_exp.scala 31:20]
    node _T_87 = gt(exp_tmp[0], exp_tmp[1]) @[max_exp.scala 35:30]
    node _T_88 = mux(_T_87, exp_tmp[0], exp_tmp[1]) @[max_exp.scala 35:19]
    wire1_1 <= _T_88 @[max_exp.scala 35:13]
    node _T_89 = gt(exp_tmp[2], exp_tmp[3]) @[max_exp.scala 36:30]
    node _T_90 = mux(_T_89, exp_tmp[2], exp_tmp[3]) @[max_exp.scala 36:19]
    wire1_2 <= _T_90 @[max_exp.scala 36:13]
    node _T_91 = gt(exp_tmp[4], exp_tmp[5]) @[max_exp.scala 37:30]
    node _T_92 = mux(_T_91, exp_tmp[4], exp_tmp[5]) @[max_exp.scala 37:19]
    wire1_3 <= _T_92 @[max_exp.scala 37:13]
    node _T_93 = gt(exp_tmp[6], exp_tmp[7]) @[max_exp.scala 38:30]
    node _T_94 = mux(_T_93, exp_tmp[6], exp_tmp[7]) @[max_exp.scala 38:19]
    wire1_4 <= _T_94 @[max_exp.scala 38:13]
    node _T_95 = gt(wire1_1, wire1_2) @[max_exp.scala 39:27]
    node _T_96 = mux(_T_95, wire1_1, wire1_2) @[max_exp.scala 39:19]
    wire2_1 <= _T_96 @[max_exp.scala 39:13]
    node _T_97 = gt(wire1_3, wire1_4) @[max_exp.scala 40:27]
    node _T_98 = mux(_T_97, wire1_3, wire1_4) @[max_exp.scala 40:19]
    wire2_2 <= _T_98 @[max_exp.scala 40:13]
    node _T_99 = gt(wire2_1, wire2_2) @[max_exp.scala 41:27]
    node _T_100 = mux(_T_99, wire2_1, wire2_2) @[max_exp.scala 41:19]
    wire3_1 <= _T_100 @[max_exp.scala 41:13]
    node _T_101 = gt(wire3_1, exp_tmp[8]) @[max_exp.scala 42:34]
    node _T_102 = mux(_T_101, wire3_1, exp_tmp[8]) @[max_exp.scala 42:26]
    io.out.max_exp <= _T_102 @[max_exp.scala 42:20]
    io.out.debug <= wire1_1 @[max_exp.scala 43:17]
    
  module Align_CG2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module Align_CG2_8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}
    
    wire pp1_pad : UInt<24> @[align.scala 22:23]
    wire pp2_pad : UInt<24> @[align.scala 23:23]
    node _T_19 = bits(io.in.pp1, 8, 0) @[align.scala 24:29]
    node _T_21 = cat(_T_19, UInt<14>("h00")) @[Cat.scala 30:58]
    pp1_pad <= _T_21 @[align.scala 24:13]
    node _T_22 = bits(io.in.pp2, 8, 0) @[align.scala 25:29]
    node _T_24 = cat(_T_22, UInt<14>("h00")) @[Cat.scala 30:58]
    pp2_pad <= _T_24 @[align.scala 25:13]
    wire pp1_shift : UInt<24> @[align.scala 26:25]
    wire pp2_shift : UInt<24> @[align.scala 27:25]
    node _T_27 = sub(io.in.max_exp, io.in.exp) @[align.scala 28:42]
    node _T_28 = asUInt(_T_27) @[align.scala 28:42]
    node _T_29 = tail(_T_28, 1) @[align.scala 28:42]
    node _T_30 = dshr(pp1_pad, _T_29) @[align.scala 28:26]
    pp1_shift <= _T_30 @[align.scala 28:15]
    node _T_31 = sub(io.in.max_exp, io.in.exp) @[align.scala 29:42]
    node _T_32 = asUInt(_T_31) @[align.scala 29:42]
    node _T_33 = tail(_T_32, 1) @[align.scala 29:42]
    node _T_34 = dshr(pp2_pad, _T_33) @[align.scala 29:26]
    pp2_shift <= _T_34 @[align.scala 29:15]
    node _T_35 = bits(io.in.pp1, 9, 9) @[align.scala 31:38]
    node _T_36 = not(pp1_shift) @[align.scala 31:43]
    node _T_38 = add(_T_36, UInt<24>("h01")) @[align.scala 31:54]
    node _T_39 = tail(_T_38, 1) @[align.scala 31:54]
    node _T_40 = mux(_T_35, _T_39, pp1_shift) @[align.scala 31:28]
    io.out.align_pp1 <= _T_40 @[align.scala 31:22]
    node _T_41 = bits(io.in.pp2, 9, 9) @[align.scala 32:38]
    node _T_42 = not(pp2_shift) @[align.scala 32:43]
    node _T_44 = add(_T_42, UInt<24>("h01")) @[align.scala 32:53]
    node _T_45 = tail(_T_44, 1) @[align.scala 32:53]
    node _T_46 = mux(_T_41, _T_45, pp2_shift) @[align.scala 32:28]
    io.out.align_pp2 <= _T_46 @[align.scala 32:22]
    
  module SignAdder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>[2][9], out : UInt<6>}
    
    wire tmp_1 : UInt<2>[9] @[Signadder.scala 11:19]
    wire tmp_2 : UInt<3>[4] @[Signadder.scala 12:19]
    wire tmp_3 : UInt<4>[2] @[Signadder.scala 13:19]
    wire tmp_4 : UInt<5> @[Signadder.scala 14:19]
    node _T_370 = add(io.in[0][0], io.in[0][1]) @[Signadder.scala 16:29]
    node _T_371 = tail(_T_370, 1) @[Signadder.scala 16:29]
    tmp_1[0] <= _T_371 @[Signadder.scala 16:14]
    node _T_372 = add(io.in[1][0], io.in[1][1]) @[Signadder.scala 16:29]
    node _T_373 = tail(_T_372, 1) @[Signadder.scala 16:29]
    tmp_1[1] <= _T_373 @[Signadder.scala 16:14]
    node _T_374 = add(io.in[2][0], io.in[2][1]) @[Signadder.scala 16:29]
    node _T_375 = tail(_T_374, 1) @[Signadder.scala 16:29]
    tmp_1[2] <= _T_375 @[Signadder.scala 16:14]
    node _T_376 = add(io.in[3][0], io.in[3][1]) @[Signadder.scala 16:29]
    node _T_377 = tail(_T_376, 1) @[Signadder.scala 16:29]
    tmp_1[3] <= _T_377 @[Signadder.scala 16:14]
    node _T_378 = add(io.in[4][0], io.in[4][1]) @[Signadder.scala 16:29]
    node _T_379 = tail(_T_378, 1) @[Signadder.scala 16:29]
    tmp_1[4] <= _T_379 @[Signadder.scala 16:14]
    node _T_380 = add(io.in[5][0], io.in[5][1]) @[Signadder.scala 16:29]
    node _T_381 = tail(_T_380, 1) @[Signadder.scala 16:29]
    tmp_1[5] <= _T_381 @[Signadder.scala 16:14]
    node _T_382 = add(io.in[6][0], io.in[6][1]) @[Signadder.scala 16:29]
    node _T_383 = tail(_T_382, 1) @[Signadder.scala 16:29]
    tmp_1[6] <= _T_383 @[Signadder.scala 16:14]
    node _T_384 = add(io.in[7][0], io.in[7][1]) @[Signadder.scala 16:29]
    node _T_385 = tail(_T_384, 1) @[Signadder.scala 16:29]
    tmp_1[7] <= _T_385 @[Signadder.scala 16:14]
    node _T_386 = add(io.in[8][0], io.in[8][1]) @[Signadder.scala 16:29]
    node _T_387 = tail(_T_386, 1) @[Signadder.scala 16:29]
    tmp_1[8] <= _T_387 @[Signadder.scala 16:14]
    node _T_388 = add(tmp_1[0], tmp_1[1]) @[Signadder.scala 19:30]
    node _T_389 = tail(_T_388, 1) @[Signadder.scala 19:30]
    tmp_2[0] <= _T_389 @[Signadder.scala 19:14]
    node _T_390 = add(tmp_1[2], tmp_1[3]) @[Signadder.scala 19:30]
    node _T_391 = tail(_T_390, 1) @[Signadder.scala 19:30]
    tmp_2[1] <= _T_391 @[Signadder.scala 19:14]
    node _T_392 = add(tmp_1[4], tmp_1[5]) @[Signadder.scala 19:30]
    node _T_393 = tail(_T_392, 1) @[Signadder.scala 19:30]
    tmp_2[2] <= _T_393 @[Signadder.scala 19:14]
    node _T_394 = add(tmp_1[6], tmp_1[7]) @[Signadder.scala 19:30]
    node _T_395 = tail(_T_394, 1) @[Signadder.scala 19:30]
    tmp_2[3] <= _T_395 @[Signadder.scala 19:14]
    node _T_396 = add(tmp_2[0], tmp_2[1]) @[Signadder.scala 22:30]
    node _T_397 = tail(_T_396, 1) @[Signadder.scala 22:30]
    tmp_3[0] <= _T_397 @[Signadder.scala 22:14]
    node _T_398 = add(tmp_2[2], tmp_2[3]) @[Signadder.scala 22:30]
    node _T_399 = tail(_T_398, 1) @[Signadder.scala 22:30]
    tmp_3[1] <= _T_399 @[Signadder.scala 22:14]
    node _T_400 = add(tmp_3[0], tmp_3[1]) @[Signadder.scala 24:21]
    node _T_401 = tail(_T_400, 1) @[Signadder.scala 24:21]
    tmp_4 <= _T_401 @[Signadder.scala 24:9]
    node _T_402 = add(tmp_4, tmp_1[8]) @[Signadder.scala 25:20]
    node _T_403 = not(_T_402) @[Signadder.scala 25:13]
    node _T_405 = add(_T_403, UInt<6>("h01")) @[Signadder.scala 25:32]
    node _T_406 = tail(_T_405, 1) @[Signadder.scala 25:32]
    io.out <= _T_406 @[Signadder.scala 25:10]
    
  module treeadder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<23>[18], out : UInt<28>}
    
    node _T_54 = add(io.in[0], io.in[1]) @[treeadder.scala 13:36]
    node _T_55 = tail(_T_54, 1) @[treeadder.scala 13:36]
    node _T_56 = add(_T_55, io.in[2]) @[treeadder.scala 14:13]
    node _T_57 = tail(_T_56, 1) @[treeadder.scala 14:13]
    node _T_58 = add(_T_57, io.in[3]) @[treeadder.scala 15:13]
    node _T_59 = tail(_T_58, 1) @[treeadder.scala 15:13]
    node _T_60 = add(_T_59, io.in[4]) @[treeadder.scala 16:13]
    node _T_61 = tail(_T_60, 1) @[treeadder.scala 16:13]
    node _T_62 = add(_T_61, io.in[5]) @[treeadder.scala 17:13]
    node _T_63 = tail(_T_62, 1) @[treeadder.scala 17:13]
    node _T_64 = add(_T_63, io.in[6]) @[treeadder.scala 18:13]
    node _T_65 = tail(_T_64, 1) @[treeadder.scala 18:13]
    node _T_66 = add(_T_65, io.in[7]) @[treeadder.scala 19:13]
    node _T_67 = tail(_T_66, 1) @[treeadder.scala 19:13]
    node _T_68 = add(_T_67, io.in[8]) @[treeadder.scala 20:13]
    node _T_69 = tail(_T_68, 1) @[treeadder.scala 20:13]
    node _T_70 = add(_T_69, io.in[9]) @[treeadder.scala 21:13]
    node _T_71 = tail(_T_70, 1) @[treeadder.scala 21:13]
    node _T_72 = add(_T_71, io.in[10]) @[treeadder.scala 22:13]
    node _T_73 = tail(_T_72, 1) @[treeadder.scala 22:13]
    node _T_74 = add(_T_73, io.in[11]) @[treeadder.scala 23:14]
    node _T_75 = tail(_T_74, 1) @[treeadder.scala 23:14]
    node _T_76 = add(_T_75, io.in[12]) @[treeadder.scala 24:14]
    node _T_77 = tail(_T_76, 1) @[treeadder.scala 24:14]
    node _T_78 = add(_T_77, io.in[13]) @[treeadder.scala 25:14]
    node _T_79 = tail(_T_78, 1) @[treeadder.scala 25:14]
    node _T_80 = add(_T_79, io.in[14]) @[treeadder.scala 26:14]
    node _T_81 = tail(_T_80, 1) @[treeadder.scala 26:14]
    node _T_82 = add(_T_81, io.in[15]) @[treeadder.scala 27:14]
    node _T_83 = tail(_T_82, 1) @[treeadder.scala 27:14]
    node _T_84 = add(_T_83, io.in[16]) @[treeadder.scala 28:14]
    node _T_85 = tail(_T_84, 1) @[treeadder.scala 28:14]
    node _T_86 = add(_T_85, io.in[17]) @[treeadder.scala 29:14]
    node _T_87 = tail(_T_86, 1) @[treeadder.scala 29:14]
    node _T_88 = cat(UInt<5>("h00"), _T_87) @[Cat.scala 30:58]
    io.out <= _T_88 @[treeadder.scala 13:12]
    
  module final_norm_noSUB : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input_exp : UInt<9>, flip PP_sum : UInt<29>, norm_sum : UInt<23>, norm_exp : UInt<8>, sign : UInt<1>}
    
    wire POS_or_NEG : UInt<1> @[norm.scala 14:30]
    node _T_16 = bits(io.PP_sum, 27, 27) @[norm.scala 15:32]
    node _T_19 = mux(_T_16, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 15:22]
    POS_or_NEG <= _T_19 @[norm.scala 15:16]
    io.sign <= POS_or_NEG @[norm.scala 16:13]
    wire unsign_sum : UInt<29> @[norm.scala 18:26]
    node _T_22 = eq(POS_or_NEG, UInt<1>("h00")) @[norm.scala 19:34]
    node _T_23 = not(io.PP_sum) @[norm.scala 19:56]
    node _T_25 = add(_T_23, UInt<1>("h01")) @[norm.scala 19:67]
    node _T_26 = tail(_T_25, 1) @[norm.scala 19:67]
    node _T_27 = mux(_T_22, io.PP_sum, _T_26) @[norm.scala 19:22]
    unsign_sum <= _T_27 @[norm.scala 19:16]
    wire leading_vector : UInt<1>[27] @[norm.scala 20:30]
    node _T_60 = bits(unsign_sum, 27, 27) @[norm.scala 23:42]
    node _T_62 = neq(_T_60, UInt<1>("h00")) @[norm.scala 23:47]
    node _T_64 = eq(_T_62, UInt<1>("h00")) @[norm.scala 23:53]
    node _T_65 = bits(unsign_sum, 26, 26) @[norm.scala 23:73]
    node _T_67 = eq(_T_65, UInt<1>("h01")) @[norm.scala 23:78]
    node _T_68 = and(_T_64, _T_67) @[norm.scala 23:61]
    node _T_71 = mux(_T_68, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 23:30]
    leading_vector[26] <= _T_71 @[norm.scala 23:24]
    node _T_72 = bits(unsign_sum, 27, 26) @[norm.scala 24:41]
    node _T_74 = neq(_T_72, UInt<1>("h00")) @[norm.scala 24:50]
    node _T_76 = eq(_T_74, UInt<1>("h00")) @[norm.scala 24:54]
    node _T_77 = bits(unsign_sum, 25, 25) @[norm.scala 24:74]
    node _T_79 = eq(_T_77, UInt<1>("h01")) @[norm.scala 24:79]
    node _T_80 = and(_T_76, _T_79) @[norm.scala 24:62]
    node _T_83 = mux(_T_80, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 24:30]
    leading_vector[25] <= _T_83 @[norm.scala 24:24]
    node _T_84 = bits(unsign_sum, 27, 25) @[norm.scala 25:41]
    node _T_86 = neq(_T_84, UInt<1>("h00")) @[norm.scala 25:50]
    node _T_88 = eq(_T_86, UInt<1>("h00")) @[norm.scala 25:54]
    node _T_89 = bits(unsign_sum, 24, 24) @[norm.scala 25:74]
    node _T_91 = eq(_T_89, UInt<1>("h01")) @[norm.scala 25:79]
    node _T_92 = and(_T_88, _T_91) @[norm.scala 25:62]
    node _T_95 = mux(_T_92, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 25:30]
    leading_vector[24] <= _T_95 @[norm.scala 25:24]
    node _T_96 = bits(unsign_sum, 27, 24) @[norm.scala 26:41]
    node _T_98 = neq(_T_96, UInt<1>("h00")) @[norm.scala 26:50]
    node _T_100 = eq(_T_98, UInt<1>("h00")) @[norm.scala 26:53]
    node _T_101 = bits(unsign_sum, 23, 23) @[norm.scala 26:73]
    node _T_103 = eq(_T_101, UInt<1>("h01")) @[norm.scala 26:78]
    node _T_104 = and(_T_100, _T_103) @[norm.scala 26:61]
    node _T_107 = mux(_T_104, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 26:30]
    leading_vector[23] <= _T_107 @[norm.scala 26:24]
    node _T_108 = bits(unsign_sum, 27, 23) @[norm.scala 27:41]
    node _T_110 = neq(_T_108, UInt<1>("h00")) @[norm.scala 27:50]
    node _T_112 = eq(_T_110, UInt<1>("h00")) @[norm.scala 27:53]
    node _T_113 = bits(unsign_sum, 22, 22) @[norm.scala 27:73]
    node _T_115 = eq(_T_113, UInt<1>("h01")) @[norm.scala 27:78]
    node _T_116 = and(_T_112, _T_115) @[norm.scala 27:61]
    node _T_119 = mux(_T_116, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 27:30]
    leading_vector[22] <= _T_119 @[norm.scala 27:24]
    node _T_120 = bits(unsign_sum, 27, 22) @[norm.scala 28:41]
    node _T_122 = neq(_T_120, UInt<1>("h00")) @[norm.scala 28:50]
    node _T_124 = eq(_T_122, UInt<1>("h00")) @[norm.scala 28:53]
    node _T_125 = bits(unsign_sum, 21, 21) @[norm.scala 28:73]
    node _T_127 = eq(_T_125, UInt<1>("h01")) @[norm.scala 28:78]
    node _T_128 = and(_T_124, _T_127) @[norm.scala 28:61]
    node _T_131 = mux(_T_128, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 28:30]
    leading_vector[21] <= _T_131 @[norm.scala 28:24]
    node _T_132 = bits(unsign_sum, 27, 21) @[norm.scala 29:41]
    node _T_134 = neq(_T_132, UInt<1>("h00")) @[norm.scala 29:50]
    node _T_136 = eq(_T_134, UInt<1>("h00")) @[norm.scala 29:54]
    node _T_137 = bits(unsign_sum, 20, 20) @[norm.scala 29:74]
    node _T_139 = eq(_T_137, UInt<1>("h01")) @[norm.scala 29:79]
    node _T_140 = and(_T_136, _T_139) @[norm.scala 29:62]
    node _T_143 = mux(_T_140, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 29:30]
    leading_vector[20] <= _T_143 @[norm.scala 29:24]
    node _T_144 = bits(unsign_sum, 27, 20) @[norm.scala 30:41]
    node _T_146 = neq(_T_144, UInt<1>("h00")) @[norm.scala 30:50]
    node _T_148 = eq(_T_146, UInt<1>("h00")) @[norm.scala 30:54]
    node _T_149 = bits(unsign_sum, 19, 19) @[norm.scala 30:74]
    node _T_151 = eq(_T_149, UInt<1>("h01")) @[norm.scala 30:79]
    node _T_152 = and(_T_148, _T_151) @[norm.scala 30:62]
    node _T_155 = mux(_T_152, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 30:30]
    leading_vector[19] <= _T_155 @[norm.scala 30:24]
    node _T_156 = bits(unsign_sum, 27, 19) @[norm.scala 31:41]
    node _T_158 = neq(_T_156, UInt<1>("h00")) @[norm.scala 31:50]
    node _T_160 = eq(_T_158, UInt<1>("h00")) @[norm.scala 31:54]
    node _T_161 = bits(unsign_sum, 18, 18) @[norm.scala 31:74]
    node _T_163 = eq(_T_161, UInt<1>("h01")) @[norm.scala 31:79]
    node _T_164 = and(_T_160, _T_163) @[norm.scala 31:62]
    node _T_167 = mux(_T_164, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 31:30]
    leading_vector[18] <= _T_167 @[norm.scala 31:24]
    node _T_168 = bits(unsign_sum, 27, 18) @[norm.scala 32:41]
    node _T_170 = neq(_T_168, UInt<1>("h00")) @[norm.scala 32:50]
    node _T_172 = eq(_T_170, UInt<1>("h00")) @[norm.scala 32:54]
    node _T_173 = bits(unsign_sum, 17, 17) @[norm.scala 32:74]
    node _T_175 = eq(_T_173, UInt<1>("h01")) @[norm.scala 32:79]
    node _T_176 = and(_T_172, _T_175) @[norm.scala 32:62]
    node _T_179 = mux(_T_176, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 32:30]
    leading_vector[17] <= _T_179 @[norm.scala 32:24]
    node _T_180 = bits(unsign_sum, 27, 17) @[norm.scala 33:41]
    node _T_182 = neq(_T_180, UInt<1>("h00")) @[norm.scala 33:50]
    node _T_184 = eq(_T_182, UInt<1>("h00")) @[norm.scala 33:54]
    node _T_185 = bits(unsign_sum, 16, 16) @[norm.scala 33:74]
    node _T_187 = eq(_T_185, UInt<1>("h01")) @[norm.scala 33:79]
    node _T_188 = and(_T_184, _T_187) @[norm.scala 33:62]
    node _T_191 = mux(_T_188, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 33:30]
    leading_vector[16] <= _T_191 @[norm.scala 33:24]
    node _T_192 = bits(unsign_sum, 27, 16) @[norm.scala 35:41]
    node _T_194 = neq(_T_192, UInt<1>("h00")) @[norm.scala 35:50]
    node _T_196 = eq(_T_194, UInt<1>("h00")) @[norm.scala 35:54]
    node _T_197 = bits(unsign_sum, 15, 15) @[norm.scala 35:74]
    node _T_199 = eq(_T_197, UInt<1>("h01")) @[norm.scala 35:79]
    node _T_200 = and(_T_196, _T_199) @[norm.scala 35:62]
    node _T_203 = mux(_T_200, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 35:30]
    leading_vector[15] <= _T_203 @[norm.scala 35:24]
    node _T_204 = bits(unsign_sum, 27, 15) @[norm.scala 36:41]
    node _T_206 = neq(_T_204, UInt<1>("h00")) @[norm.scala 36:50]
    node _T_208 = eq(_T_206, UInt<1>("h00")) @[norm.scala 36:54]
    node _T_209 = bits(unsign_sum, 14, 14) @[norm.scala 36:74]
    node _T_211 = eq(_T_209, UInt<1>("h01")) @[norm.scala 36:79]
    node _T_212 = and(_T_208, _T_211) @[norm.scala 36:62]
    node _T_215 = mux(_T_212, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 36:30]
    leading_vector[14] <= _T_215 @[norm.scala 36:24]
    node _T_216 = bits(unsign_sum, 27, 14) @[norm.scala 37:41]
    node _T_218 = neq(_T_216, UInt<1>("h00")) @[norm.scala 37:50]
    node _T_220 = eq(_T_218, UInt<1>("h00")) @[norm.scala 37:54]
    node _T_221 = bits(unsign_sum, 13, 13) @[norm.scala 37:74]
    node _T_223 = eq(_T_221, UInt<1>("h01")) @[norm.scala 37:79]
    node _T_224 = and(_T_220, _T_223) @[norm.scala 37:62]
    node _T_227 = mux(_T_224, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 37:30]
    leading_vector[13] <= _T_227 @[norm.scala 37:24]
    node _T_228 = bits(unsign_sum, 27, 13) @[norm.scala 38:41]
    node _T_230 = neq(_T_228, UInt<1>("h00")) @[norm.scala 38:50]
    node _T_232 = eq(_T_230, UInt<1>("h00")) @[norm.scala 38:54]
    node _T_233 = bits(unsign_sum, 12, 12) @[norm.scala 38:74]
    node _T_235 = eq(_T_233, UInt<1>("h01")) @[norm.scala 38:79]
    node _T_236 = and(_T_232, _T_235) @[norm.scala 38:62]
    node _T_239 = mux(_T_236, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 38:30]
    leading_vector[12] <= _T_239 @[norm.scala 38:24]
    node _T_240 = bits(unsign_sum, 27, 12) @[norm.scala 39:41]
    node _T_242 = neq(_T_240, UInt<1>("h00")) @[norm.scala 39:50]
    node _T_244 = eq(_T_242, UInt<1>("h00")) @[norm.scala 39:54]
    node _T_245 = bits(unsign_sum, 11, 11) @[norm.scala 39:74]
    node _T_247 = eq(_T_245, UInt<1>("h01")) @[norm.scala 39:79]
    node _T_248 = and(_T_244, _T_247) @[norm.scala 39:62]
    node _T_251 = mux(_T_248, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 39:30]
    leading_vector[11] <= _T_251 @[norm.scala 39:24]
    node _T_252 = bits(unsign_sum, 27, 11) @[norm.scala 41:41]
    node _T_254 = neq(_T_252, UInt<1>("h00")) @[norm.scala 41:50]
    node _T_256 = eq(_T_254, UInt<1>("h00")) @[norm.scala 41:54]
    node _T_257 = bits(unsign_sum, 10, 10) @[norm.scala 41:74]
    node _T_259 = eq(_T_257, UInt<1>("h01")) @[norm.scala 41:79]
    node _T_260 = and(_T_256, _T_259) @[norm.scala 41:62]
    node _T_263 = mux(_T_260, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 41:30]
    leading_vector[10] <= _T_263 @[norm.scala 41:24]
    node _T_264 = bits(unsign_sum, 27, 10) @[norm.scala 42:40]
    node _T_266 = neq(_T_264, UInt<1>("h00")) @[norm.scala 42:49]
    node _T_268 = eq(_T_266, UInt<1>("h00")) @[norm.scala 42:53]
    node _T_269 = bits(unsign_sum, 9, 9) @[norm.scala 42:73]
    node _T_271 = eq(_T_269, UInt<1>("h01")) @[norm.scala 42:77]
    node _T_272 = and(_T_268, _T_271) @[norm.scala 42:61]
    node _T_275 = mux(_T_272, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 42:29]
    leading_vector[9] <= _T_275 @[norm.scala 42:23]
    node _T_276 = bits(unsign_sum, 27, 9) @[norm.scala 43:40]
    node _T_278 = neq(_T_276, UInt<1>("h00")) @[norm.scala 43:48]
    node _T_280 = eq(_T_278, UInt<1>("h00")) @[norm.scala 43:52]
    node _T_281 = bits(unsign_sum, 8, 8) @[norm.scala 43:72]
    node _T_283 = eq(_T_281, UInt<1>("h01")) @[norm.scala 43:76]
    node _T_284 = and(_T_280, _T_283) @[norm.scala 43:60]
    node _T_287 = mux(_T_284, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 43:29]
    leading_vector[8] <= _T_287 @[norm.scala 43:23]
    node _T_288 = bits(unsign_sum, 27, 8) @[norm.scala 44:40]
    node _T_290 = neq(_T_288, UInt<1>("h00")) @[norm.scala 44:48]
    node _T_292 = eq(_T_290, UInt<1>("h00")) @[norm.scala 44:52]
    node _T_293 = bits(unsign_sum, 7, 7) @[norm.scala 44:72]
    node _T_295 = eq(_T_293, UInt<1>("h01")) @[norm.scala 44:76]
    node _T_296 = and(_T_292, _T_295) @[norm.scala 44:60]
    node _T_299 = mux(_T_296, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 44:29]
    leading_vector[7] <= _T_299 @[norm.scala 44:23]
    node _T_300 = bits(unsign_sum, 27, 7) @[norm.scala 45:40]
    node _T_302 = neq(_T_300, UInt<1>("h00")) @[norm.scala 45:48]
    node _T_304 = eq(_T_302, UInt<1>("h00")) @[norm.scala 45:52]
    node _T_305 = bits(unsign_sum, 6, 6) @[norm.scala 45:72]
    node _T_307 = eq(_T_305, UInt<1>("h01")) @[norm.scala 45:76]
    node _T_308 = and(_T_304, _T_307) @[norm.scala 45:60]
    node _T_311 = mux(_T_308, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 45:29]
    leading_vector[6] <= _T_311 @[norm.scala 45:23]
    node _T_312 = bits(unsign_sum, 27, 6) @[norm.scala 47:40]
    node _T_314 = neq(_T_312, UInt<1>("h00")) @[norm.scala 47:48]
    node _T_316 = eq(_T_314, UInt<1>("h00")) @[norm.scala 47:52]
    node _T_317 = bits(unsign_sum, 5, 5) @[norm.scala 47:72]
    node _T_319 = eq(_T_317, UInt<1>("h01")) @[norm.scala 47:76]
    node _T_320 = and(_T_316, _T_319) @[norm.scala 47:60]
    node _T_323 = mux(_T_320, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 47:29]
    leading_vector[5] <= _T_323 @[norm.scala 47:23]
    node _T_324 = bits(unsign_sum, 27, 5) @[norm.scala 48:40]
    node _T_326 = neq(_T_324, UInt<1>("h00")) @[norm.scala 48:48]
    node _T_328 = eq(_T_326, UInt<1>("h00")) @[norm.scala 48:52]
    node _T_329 = bits(unsign_sum, 4, 4) @[norm.scala 48:72]
    node _T_331 = eq(_T_329, UInt<1>("h01")) @[norm.scala 48:76]
    node _T_332 = and(_T_328, _T_331) @[norm.scala 48:60]
    node _T_335 = mux(_T_332, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 48:29]
    leading_vector[4] <= _T_335 @[norm.scala 48:23]
    node _T_336 = bits(unsign_sum, 27, 4) @[norm.scala 49:40]
    node _T_338 = neq(_T_336, UInt<1>("h00")) @[norm.scala 49:48]
    node _T_340 = eq(_T_338, UInt<1>("h00")) @[norm.scala 49:52]
    node _T_341 = bits(unsign_sum, 3, 3) @[norm.scala 49:72]
    node _T_343 = eq(_T_341, UInt<1>("h01")) @[norm.scala 49:76]
    node _T_344 = and(_T_340, _T_343) @[norm.scala 49:60]
    node _T_347 = mux(_T_344, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 49:29]
    leading_vector[3] <= _T_347 @[norm.scala 49:23]
    node _T_348 = bits(unsign_sum, 27, 3) @[norm.scala 50:40]
    node _T_350 = neq(_T_348, UInt<1>("h00")) @[norm.scala 50:48]
    node _T_352 = eq(_T_350, UInt<1>("h00")) @[norm.scala 50:52]
    node _T_353 = bits(unsign_sum, 2, 2) @[norm.scala 50:72]
    node _T_355 = eq(_T_353, UInt<1>("h01")) @[norm.scala 50:76]
    node _T_356 = and(_T_352, _T_355) @[norm.scala 50:60]
    node _T_359 = mux(_T_356, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 50:29]
    leading_vector[2] <= _T_359 @[norm.scala 50:23]
    node _T_360 = bits(unsign_sum, 27, 2) @[norm.scala 51:40]
    node _T_362 = neq(_T_360, UInt<1>("h00")) @[norm.scala 51:48]
    node _T_364 = eq(_T_362, UInt<1>("h00")) @[norm.scala 51:52]
    node _T_365 = bits(unsign_sum, 1, 1) @[norm.scala 51:72]
    node _T_367 = eq(_T_365, UInt<1>("h01")) @[norm.scala 51:76]
    node _T_368 = and(_T_364, _T_367) @[norm.scala 51:60]
    node _T_371 = mux(_T_368, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 51:29]
    leading_vector[1] <= _T_371 @[norm.scala 51:23]
    node _T_372 = bits(unsign_sum, 27, 1) @[norm.scala 52:40]
    node _T_374 = neq(_T_372, UInt<1>("h00")) @[norm.scala 52:48]
    node _T_376 = eq(_T_374, UInt<1>("h00")) @[norm.scala 52:52]
    node _T_377 = bits(unsign_sum, 0, 0) @[norm.scala 52:72]
    node _T_379 = eq(_T_377, UInt<1>("h01")) @[norm.scala 52:76]
    node _T_380 = and(_T_376, _T_379) @[norm.scala 52:60]
    node _T_383 = mux(_T_380, UInt<1>("h01"), UInt<1>("h00")) @[norm.scala 52:29]
    leading_vector[0] <= _T_383 @[norm.scala 52:23]
    node _T_385 = eq(leading_vector[26], UInt<1>("h01")) @[norm.scala 54:29]
    when _T_385 : @[norm.scala 54:37]
      node _T_386 = bits(unsign_sum, 26, 4) @[norm.scala 55:34]
      io.norm_sum <= _T_386 @[norm.scala 55:21]
      io.norm_exp <= UInt<8>("h00") @[norm.scala 56:21]
      skip @[norm.scala 54:37]
    else : @[norm.scala 57:44]
      node _T_389 = eq(leading_vector[25], UInt<1>("h01")) @[norm.scala 57:36]
      when _T_389 : @[norm.scala 57:44]
        node _T_390 = bits(unsign_sum, 25, 3) @[norm.scala 58:34]
        io.norm_sum <= _T_390 @[norm.scala 58:21]
        io.norm_exp <= UInt<8>("h00") @[norm.scala 59:21]
        skip @[norm.scala 57:44]
      else : @[norm.scala 60:45]
        node _T_393 = eq(leading_vector[24], UInt<1>("h01")) @[norm.scala 60:37]
        when _T_393 : @[norm.scala 60:45]
          node _T_394 = bits(unsign_sum, 24, 2) @[norm.scala 61:34]
          io.norm_sum <= _T_394 @[norm.scala 61:21]
          io.norm_exp <= UInt<8>("h01") @[norm.scala 62:21]
          skip @[norm.scala 60:45]
        else : @[norm.scala 63:44]
          node _T_397 = eq(leading_vector[23], UInt<1>("h01")) @[norm.scala 63:36]
          when _T_397 : @[norm.scala 63:44]
            node _T_398 = bits(unsign_sum, 23, 1) @[norm.scala 64:34]
            io.norm_sum <= _T_398 @[norm.scala 64:21]
            io.norm_exp <= UInt<8>("h02") @[norm.scala 65:21]
            skip @[norm.scala 63:44]
          else : @[norm.scala 66:44]
            node _T_401 = eq(leading_vector[22], UInt<1>("h01")) @[norm.scala 66:36]
            when _T_401 : @[norm.scala 66:44]
              node _T_402 = bits(unsign_sum, 22, 0) @[norm.scala 67:34]
              io.norm_sum <= _T_402 @[norm.scala 67:21]
              io.norm_exp <= UInt<8>("h03") @[norm.scala 68:21]
              skip @[norm.scala 66:44]
            else : @[norm.scala 69:44]
              node _T_405 = eq(leading_vector[21], UInt<1>("h01")) @[norm.scala 69:36]
              when _T_405 : @[norm.scala 69:44]
                node _T_407 = bits(unsign_sum, 21, 0) @[norm.scala 70:47]
                node _T_408 = cat(UInt<1>("h00"), _T_407) @[Cat.scala 30:58]
                io.norm_sum <= _T_408 @[norm.scala 70:21]
                io.norm_exp <= UInt<8>("h04") @[norm.scala 71:21]
                skip @[norm.scala 69:44]
              else : @[norm.scala 72:44]
                node _T_411 = eq(leading_vector[20], UInt<1>("h01")) @[norm.scala 72:36]
                when _T_411 : @[norm.scala 72:44]
                  node _T_412 = bits(unsign_sum, 20, 0) @[norm.scala 73:34]
                  io.norm_sum <= _T_412 @[norm.scala 73:21]
                  io.norm_exp <= UInt<8>("h05") @[norm.scala 74:21]
                  skip @[norm.scala 72:44]
                else : @[norm.scala 75:44]
                  node _T_415 = eq(leading_vector[19], UInt<1>("h01")) @[norm.scala 75:36]
                  when _T_415 : @[norm.scala 75:44]
                    node _T_416 = bits(unsign_sum, 19, 0) @[norm.scala 76:34]
                    io.norm_sum <= _T_416 @[norm.scala 76:21]
                    io.norm_exp <= UInt<8>("h06") @[norm.scala 77:21]
                    skip @[norm.scala 75:44]
                  else : @[norm.scala 78:44]
                    node _T_419 = eq(leading_vector[18], UInt<1>("h01")) @[norm.scala 78:36]
                    when _T_419 : @[norm.scala 78:44]
                      node _T_420 = bits(unsign_sum, 18, 0) @[norm.scala 79:34]
                      io.norm_sum <= _T_420 @[norm.scala 79:21]
                      io.norm_exp <= UInt<8>("h07") @[norm.scala 80:21]
                      skip @[norm.scala 78:44]
                    else : @[norm.scala 81:44]
                      node _T_423 = eq(leading_vector[17], UInt<1>("h01")) @[norm.scala 81:36]
                      when _T_423 : @[norm.scala 81:44]
                        node _T_424 = bits(unsign_sum, 17, 0) @[norm.scala 82:34]
                        io.norm_sum <= _T_424 @[norm.scala 82:21]
                        io.norm_exp <= UInt<8>("h08") @[norm.scala 83:21]
                        skip @[norm.scala 81:44]
                      else : @[norm.scala 84:44]
                        node _T_427 = eq(leading_vector[16], UInt<1>("h01")) @[norm.scala 84:36]
                        when _T_427 : @[norm.scala 84:44]
                          node _T_428 = bits(unsign_sum, 16, 0) @[norm.scala 85:34]
                          io.norm_sum <= _T_428 @[norm.scala 85:21]
                          io.norm_exp <= UInt<8>("h09") @[norm.scala 86:21]
                          skip @[norm.scala 84:44]
                        else : @[norm.scala 87:44]
                          node _T_431 = eq(leading_vector[15], UInt<1>("h01")) @[norm.scala 87:36]
                          when _T_431 : @[norm.scala 87:44]
                            node _T_432 = bits(unsign_sum, 15, 0) @[norm.scala 88:34]
                            io.norm_sum <= _T_432 @[norm.scala 88:21]
                            io.norm_exp <= UInt<8>("h0a") @[norm.scala 89:21]
                            skip @[norm.scala 87:44]
                          else : @[norm.scala 90:44]
                            node _T_435 = eq(leading_vector[14], UInt<1>("h01")) @[norm.scala 90:36]
                            when _T_435 : @[norm.scala 90:44]
                              node _T_436 = bits(unsign_sum, 14, 0) @[norm.scala 91:34]
                              io.norm_sum <= _T_436 @[norm.scala 91:21]
                              io.norm_exp <= UInt<8>("h0b") @[norm.scala 92:21]
                              skip @[norm.scala 90:44]
                            else : @[norm.scala 93:44]
                              node _T_439 = eq(leading_vector[13], UInt<1>("h01")) @[norm.scala 93:36]
                              when _T_439 : @[norm.scala 93:44]
                                node _T_440 = bits(unsign_sum, 13, 0) @[norm.scala 94:34]
                                io.norm_sum <= _T_440 @[norm.scala 94:21]
                                io.norm_exp <= UInt<8>("h0c") @[norm.scala 95:21]
                                skip @[norm.scala 93:44]
                              else : @[norm.scala 96:44]
                                node _T_443 = eq(leading_vector[12], UInt<1>("h01")) @[norm.scala 96:36]
                                when _T_443 : @[norm.scala 96:44]
                                  node _T_444 = bits(unsign_sum, 12, 0) @[norm.scala 97:34]
                                  io.norm_sum <= _T_444 @[norm.scala 97:21]
                                  io.norm_exp <= UInt<8>("h0d") @[norm.scala 98:21]
                                  skip @[norm.scala 96:44]
                                else : @[norm.scala 99:44]
                                  node _T_447 = eq(leading_vector[11], UInt<1>("h01")) @[norm.scala 99:36]
                                  when _T_447 : @[norm.scala 99:44]
                                    node _T_448 = bits(unsign_sum, 11, 0) @[norm.scala 100:34]
                                    io.norm_sum <= _T_448 @[norm.scala 100:21]
                                    io.norm_exp <= UInt<8>("h0e") @[norm.scala 101:21]
                                    skip @[norm.scala 99:44]
                                  else : @[norm.scala 102:44]
                                    node _T_451 = eq(leading_vector[10], UInt<1>("h01")) @[norm.scala 102:36]
                                    when _T_451 : @[norm.scala 102:44]
                                      node _T_452 = bits(unsign_sum, 10, 0) @[norm.scala 103:34]
                                      io.norm_sum <= _T_452 @[norm.scala 103:21]
                                      io.norm_exp <= UInt<8>("h0f") @[norm.scala 104:21]
                                      skip @[norm.scala 102:44]
                                    else : @[norm.scala 105:43]
                                      node _T_455 = eq(leading_vector[9], UInt<1>("h01")) @[norm.scala 105:35]
                                      when _T_455 : @[norm.scala 105:43]
                                        node _T_456 = bits(unsign_sum, 9, 0) @[norm.scala 106:34]
                                        io.norm_sum <= _T_456 @[norm.scala 106:21]
                                        io.norm_exp <= UInt<8>("h010") @[norm.scala 107:21]
                                        skip @[norm.scala 105:43]
                                      else : @[norm.scala 108:43]
                                        node _T_459 = eq(leading_vector[8], UInt<1>("h01")) @[norm.scala 108:35]
                                        when _T_459 : @[norm.scala 108:43]
                                          node _T_460 = bits(unsign_sum, 8, 0) @[norm.scala 109:34]
                                          io.norm_sum <= _T_460 @[norm.scala 109:21]
                                          io.norm_exp <= UInt<8>("h011") @[norm.scala 110:21]
                                          skip @[norm.scala 108:43]
                                        else : @[norm.scala 111:43]
                                          node _T_463 = eq(leading_vector[7], UInt<1>("h01")) @[norm.scala 111:35]
                                          when _T_463 : @[norm.scala 111:43]
                                            node _T_464 = bits(unsign_sum, 7, 0) @[norm.scala 112:34]
                                            io.norm_sum <= _T_464 @[norm.scala 112:21]
                                            io.norm_exp <= UInt<8>("h012") @[norm.scala 113:21]
                                            skip @[norm.scala 111:43]
                                          else : @[norm.scala 114:43]
                                            node _T_467 = eq(leading_vector[6], UInt<1>("h01")) @[norm.scala 114:35]
                                            when _T_467 : @[norm.scala 114:43]
                                              node _T_468 = bits(unsign_sum, 6, 0) @[norm.scala 115:34]
                                              io.norm_sum <= _T_468 @[norm.scala 115:21]
                                              io.norm_exp <= UInt<8>("h013") @[norm.scala 116:21]
                                              skip @[norm.scala 114:43]
                                            else : @[norm.scala 117:43]
                                              node _T_471 = eq(leading_vector[5], UInt<1>("h01")) @[norm.scala 117:35]
                                              when _T_471 : @[norm.scala 117:43]
                                                node _T_472 = bits(unsign_sum, 5, 0) @[norm.scala 118:34]
                                                io.norm_sum <= _T_472 @[norm.scala 118:21]
                                                io.norm_exp <= UInt<8>("h014") @[norm.scala 119:21]
                                                skip @[norm.scala 117:43]
                                              else : @[norm.scala 120:43]
                                                node _T_475 = eq(leading_vector[4], UInt<1>("h01")) @[norm.scala 120:35]
                                                when _T_475 : @[norm.scala 120:43]
                                                  node _T_476 = bits(unsign_sum, 4, 0) @[norm.scala 121:34]
                                                  io.norm_sum <= _T_476 @[norm.scala 121:21]
                                                  io.norm_exp <= UInt<8>("h015") @[norm.scala 122:21]
                                                  skip @[norm.scala 120:43]
                                                else : @[norm.scala 123:43]
                                                  node _T_479 = eq(leading_vector[3], UInt<1>("h01")) @[norm.scala 123:35]
                                                  when _T_479 : @[norm.scala 123:43]
                                                    node _T_480 = bits(unsign_sum, 3, 0) @[norm.scala 124:34]
                                                    io.norm_sum <= _T_480 @[norm.scala 124:21]
                                                    io.norm_exp <= UInt<8>("h016") @[norm.scala 125:21]
                                                    skip @[norm.scala 123:43]
                                                  else : @[norm.scala 126:43]
                                                    node _T_483 = eq(leading_vector[2], UInt<1>("h01")) @[norm.scala 126:35]
                                                    when _T_483 : @[norm.scala 126:43]
                                                      node _T_484 = bits(unsign_sum, 2, 0) @[norm.scala 127:34]
                                                      io.norm_sum <= _T_484 @[norm.scala 127:21]
                                                      io.norm_exp <= UInt<8>("h017") @[norm.scala 128:21]
                                                      skip @[norm.scala 126:43]
                                                    else : @[norm.scala 129:43]
                                                      node _T_487 = eq(leading_vector[1], UInt<1>("h01")) @[norm.scala 129:35]
                                                      when _T_487 : @[norm.scala 129:43]
                                                        node _T_488 = bits(unsign_sum, 1, 0) @[norm.scala 130:34]
                                                        io.norm_sum <= _T_488 @[norm.scala 130:21]
                                                        io.norm_exp <= UInt<8>("h018") @[norm.scala 131:21]
                                                        skip @[norm.scala 129:43]
                                                      else : @[norm.scala 132:43]
                                                        node _T_491 = eq(leading_vector[0], UInt<1>("h01")) @[norm.scala 132:35]
                                                        when _T_491 : @[norm.scala 132:43]
                                                          node _T_492 = bits(unsign_sum, 0, 0) @[norm.scala 133:34]
                                                          io.norm_sum <= _T_492 @[norm.scala 133:21]
                                                          io.norm_exp <= UInt<8>("h019") @[norm.scala 134:21]
                                                          skip @[norm.scala 132:43]
                                                        else : @[norm.scala 135:17]
                                                          io.norm_sum <= UInt<23>("h00") @[norm.scala 136:21]
                                                          io.norm_exp <= UInt<8>("h00") @[norm.scala 137:21]
                                                          skip @[norm.scala 135:17]
    
  module PipelineMac : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {input_x : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}[9], input_w : {grps : UInt<3>[2], exponent : UInt<8>}[9], skip : UInt<9>}, out : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<23>}}
    
    reg input_x_reg : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}[9], clock @[PipelineMac.scala 24:30]
    reg input_w_reg : {grps : UInt<3>[2], exponent : UInt<8>}[9], clock @[PipelineMac.scala 25:30]
    reg skip_1_reg : UInt<9>, clock @[PipelineMac.scala 26:29]
    node _T_464 = bits(io.in.skip, 0, 0) @[PipelineMac.scala 28:49]
    node _T_466 = eq(_T_464, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_467 = mux(_T_466, io.in.input_x[0], input_x_reg[0]) @[PipelineMac.scala 28:38]
    input_x_reg[0].mantissa <= _T_467.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[0].exponent <= _T_467.exponent @[PipelineMac.scala 28:32]
    input_x_reg[0].sign <= _T_467.sign @[PipelineMac.scala 28:32]
    node _T_468 = bits(io.in.skip, 1, 1) @[PipelineMac.scala 28:49]
    node _T_470 = eq(_T_468, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_471 = mux(_T_470, io.in.input_x[1], input_x_reg[1]) @[PipelineMac.scala 28:38]
    input_x_reg[1].mantissa <= _T_471.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[1].exponent <= _T_471.exponent @[PipelineMac.scala 28:32]
    input_x_reg[1].sign <= _T_471.sign @[PipelineMac.scala 28:32]
    node _T_472 = bits(io.in.skip, 2, 2) @[PipelineMac.scala 28:49]
    node _T_474 = eq(_T_472, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_475 = mux(_T_474, io.in.input_x[2], input_x_reg[2]) @[PipelineMac.scala 28:38]
    input_x_reg[2].mantissa <= _T_475.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[2].exponent <= _T_475.exponent @[PipelineMac.scala 28:32]
    input_x_reg[2].sign <= _T_475.sign @[PipelineMac.scala 28:32]
    node _T_476 = bits(io.in.skip, 3, 3) @[PipelineMac.scala 28:49]
    node _T_478 = eq(_T_476, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_479 = mux(_T_478, io.in.input_x[3], input_x_reg[3]) @[PipelineMac.scala 28:38]
    input_x_reg[3].mantissa <= _T_479.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[3].exponent <= _T_479.exponent @[PipelineMac.scala 28:32]
    input_x_reg[3].sign <= _T_479.sign @[PipelineMac.scala 28:32]
    node _T_480 = bits(io.in.skip, 4, 4) @[PipelineMac.scala 28:49]
    node _T_482 = eq(_T_480, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_483 = mux(_T_482, io.in.input_x[4], input_x_reg[4]) @[PipelineMac.scala 28:38]
    input_x_reg[4].mantissa <= _T_483.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[4].exponent <= _T_483.exponent @[PipelineMac.scala 28:32]
    input_x_reg[4].sign <= _T_483.sign @[PipelineMac.scala 28:32]
    node _T_484 = bits(io.in.skip, 5, 5) @[PipelineMac.scala 28:49]
    node _T_486 = eq(_T_484, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_487 = mux(_T_486, io.in.input_x[5], input_x_reg[5]) @[PipelineMac.scala 28:38]
    input_x_reg[5].mantissa <= _T_487.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[5].exponent <= _T_487.exponent @[PipelineMac.scala 28:32]
    input_x_reg[5].sign <= _T_487.sign @[PipelineMac.scala 28:32]
    node _T_488 = bits(io.in.skip, 6, 6) @[PipelineMac.scala 28:49]
    node _T_490 = eq(_T_488, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_491 = mux(_T_490, io.in.input_x[6], input_x_reg[6]) @[PipelineMac.scala 28:38]
    input_x_reg[6].mantissa <= _T_491.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[6].exponent <= _T_491.exponent @[PipelineMac.scala 28:32]
    input_x_reg[6].sign <= _T_491.sign @[PipelineMac.scala 28:32]
    node _T_492 = bits(io.in.skip, 7, 7) @[PipelineMac.scala 28:49]
    node _T_494 = eq(_T_492, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_495 = mux(_T_494, io.in.input_x[7], input_x_reg[7]) @[PipelineMac.scala 28:38]
    input_x_reg[7].mantissa <= _T_495.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[7].exponent <= _T_495.exponent @[PipelineMac.scala 28:32]
    input_x_reg[7].sign <= _T_495.sign @[PipelineMac.scala 28:32]
    node _T_496 = bits(io.in.skip, 8, 8) @[PipelineMac.scala 28:49]
    node _T_498 = eq(_T_496, UInt<1>("h00")) @[PipelineMac.scala 28:53]
    node _T_499 = mux(_T_498, io.in.input_x[8], input_x_reg[8]) @[PipelineMac.scala 28:38]
    input_x_reg[8].mantissa <= _T_499.mantissa @[PipelineMac.scala 28:32]
    input_x_reg[8].exponent <= _T_499.exponent @[PipelineMac.scala 28:32]
    input_x_reg[8].sign <= _T_499.sign @[PipelineMac.scala 28:32]
    skip_1_reg <= io.in.skip @[PipelineMac.scala 30:20]
    wire pp : UInt<10>[2][9] @[PipelineMac.scala 33:22]
    wire exp : UInt<9>[9] @[PipelineMac.scala 34:23]
    inst PPGenerator of PPGenerator @[PipelineMac.scala 35:44]
    PPGenerator.clock <= clock
    PPGenerator.reset <= reset
    inst PPGenerator_1 of PPGenerator_1 @[PipelineMac.scala 35:44]
    PPGenerator_1.clock <= clock
    PPGenerator_1.reset <= reset
    inst PPGenerator_2 of PPGenerator_2 @[PipelineMac.scala 35:44]
    PPGenerator_2.clock <= clock
    PPGenerator_2.reset <= reset
    inst PPGenerator_3 of PPGenerator_3 @[PipelineMac.scala 35:44]
    PPGenerator_3.clock <= clock
    PPGenerator_3.reset <= reset
    inst PPGenerator_4 of PPGenerator_4 @[PipelineMac.scala 35:44]
    PPGenerator_4.clock <= clock
    PPGenerator_4.reset <= reset
    inst PPGenerator_5 of PPGenerator_5 @[PipelineMac.scala 35:44]
    PPGenerator_5.clock <= clock
    PPGenerator_5.reset <= reset
    inst PPGenerator_6 of PPGenerator_6 @[PipelineMac.scala 35:44]
    PPGenerator_6.clock <= clock
    PPGenerator_6.reset <= reset
    inst PPGenerator_7 of PPGenerator_7 @[PipelineMac.scala 35:44]
    PPGenerator_7.clock <= clock
    PPGenerator_7.reset <= reset
    inst PPGenerator_8 of PPGenerator_8 @[PipelineMac.scala 35:44]
    PPGenerator_8.clock <= clock
    PPGenerator_8.reset <= reset
    wire gen_pp_io : {flip in : {input : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<3>}, weight : {grps : UInt<3>[2], exponent : UInt<8>}}, out : {pp_1 : UInt<10>, pp_2 : UInt<10>, exponent : UInt<9>}}[9] @[PipelineMac.scala 35:37]
    gen_pp_io[0].out.exponent <= PPGenerator.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[0].out.pp_2 <= PPGenerator.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[0].out.pp_1 <= PPGenerator.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator.io.in.weight.exponent <= gen_pp_io[0].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator.io.in.weight.grps[0] <= gen_pp_io[0].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator.io.in.weight.grps[1] <= gen_pp_io[0].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator.io.in.input.mantissa <= gen_pp_io[0].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator.io.in.input.exponent <= gen_pp_io[0].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator.io.in.input.sign <= gen_pp_io[0].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[1].out.exponent <= PPGenerator_1.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[1].out.pp_2 <= PPGenerator_1.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[1].out.pp_1 <= PPGenerator_1.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.weight.exponent <= gen_pp_io[1].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.weight.grps[0] <= gen_pp_io[1].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.weight.grps[1] <= gen_pp_io[1].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.input.mantissa <= gen_pp_io[1].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.input.exponent <= gen_pp_io[1].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_1.io.in.input.sign <= gen_pp_io[1].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[2].out.exponent <= PPGenerator_2.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[2].out.pp_2 <= PPGenerator_2.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[2].out.pp_1 <= PPGenerator_2.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.weight.exponent <= gen_pp_io[2].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.weight.grps[0] <= gen_pp_io[2].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.weight.grps[1] <= gen_pp_io[2].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.input.mantissa <= gen_pp_io[2].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.input.exponent <= gen_pp_io[2].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_2.io.in.input.sign <= gen_pp_io[2].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[3].out.exponent <= PPGenerator_3.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[3].out.pp_2 <= PPGenerator_3.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[3].out.pp_1 <= PPGenerator_3.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.weight.exponent <= gen_pp_io[3].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.weight.grps[0] <= gen_pp_io[3].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.weight.grps[1] <= gen_pp_io[3].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.input.mantissa <= gen_pp_io[3].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.input.exponent <= gen_pp_io[3].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_3.io.in.input.sign <= gen_pp_io[3].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[4].out.exponent <= PPGenerator_4.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[4].out.pp_2 <= PPGenerator_4.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[4].out.pp_1 <= PPGenerator_4.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.weight.exponent <= gen_pp_io[4].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.weight.grps[0] <= gen_pp_io[4].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.weight.grps[1] <= gen_pp_io[4].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.input.mantissa <= gen_pp_io[4].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.input.exponent <= gen_pp_io[4].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_4.io.in.input.sign <= gen_pp_io[4].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[5].out.exponent <= PPGenerator_5.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[5].out.pp_2 <= PPGenerator_5.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[5].out.pp_1 <= PPGenerator_5.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.weight.exponent <= gen_pp_io[5].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.weight.grps[0] <= gen_pp_io[5].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.weight.grps[1] <= gen_pp_io[5].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.input.mantissa <= gen_pp_io[5].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.input.exponent <= gen_pp_io[5].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_5.io.in.input.sign <= gen_pp_io[5].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[6].out.exponent <= PPGenerator_6.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[6].out.pp_2 <= PPGenerator_6.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[6].out.pp_1 <= PPGenerator_6.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.weight.exponent <= gen_pp_io[6].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.weight.grps[0] <= gen_pp_io[6].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.weight.grps[1] <= gen_pp_io[6].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.input.mantissa <= gen_pp_io[6].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.input.exponent <= gen_pp_io[6].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_6.io.in.input.sign <= gen_pp_io[6].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[7].out.exponent <= PPGenerator_7.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[7].out.pp_2 <= PPGenerator_7.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[7].out.pp_1 <= PPGenerator_7.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.weight.exponent <= gen_pp_io[7].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.weight.grps[0] <= gen_pp_io[7].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.weight.grps[1] <= gen_pp_io[7].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.input.mantissa <= gen_pp_io[7].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.input.exponent <= gen_pp_io[7].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_7.io.in.input.sign <= gen_pp_io[7].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[8].out.exponent <= PPGenerator_8.io.out.exponent @[PipelineMac.scala 35:37]
    gen_pp_io[8].out.pp_2 <= PPGenerator_8.io.out.pp_2 @[PipelineMac.scala 35:37]
    gen_pp_io[8].out.pp_1 <= PPGenerator_8.io.out.pp_1 @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.weight.exponent <= gen_pp_io[8].in.weight.exponent @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.weight.grps[0] <= gen_pp_io[8].in.weight.grps[0] @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.weight.grps[1] <= gen_pp_io[8].in.weight.grps[1] @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.input.mantissa <= gen_pp_io[8].in.input.mantissa @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.input.exponent <= gen_pp_io[8].in.input.exponent @[PipelineMac.scala 35:37]
    PPGenerator_8.io.in.input.sign <= gen_pp_io[8].in.input.sign @[PipelineMac.scala 35:37]
    gen_pp_io[0].in.input.mantissa <= input_x_reg[0].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[0].in.input.exponent <= input_x_reg[0].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[0].in.input.sign <= input_x_reg[0].sign @[PipelineMac.scala 37:39]
    gen_pp_io[0].in.weight.exponent <= input_w_reg[0].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[0].in.weight.grps[0] <= input_w_reg[0].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[0].in.weight.grps[1] <= input_w_reg[0].grps[1] @[PipelineMac.scala 38:40]
    pp[0][0] <= gen_pp_io[0].out.pp_1 @[PipelineMac.scala 39:26]
    pp[0][1] <= gen_pp_io[0].out.pp_2 @[PipelineMac.scala 40:26]
    exp[0] <= gen_pp_io[0].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[1].in.input.mantissa <= input_x_reg[1].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[1].in.input.exponent <= input_x_reg[1].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[1].in.input.sign <= input_x_reg[1].sign @[PipelineMac.scala 37:39]
    gen_pp_io[1].in.weight.exponent <= input_w_reg[1].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[1].in.weight.grps[0] <= input_w_reg[1].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[1].in.weight.grps[1] <= input_w_reg[1].grps[1] @[PipelineMac.scala 38:40]
    pp[1][0] <= gen_pp_io[1].out.pp_1 @[PipelineMac.scala 39:26]
    pp[1][1] <= gen_pp_io[1].out.pp_2 @[PipelineMac.scala 40:26]
    exp[1] <= gen_pp_io[1].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[2].in.input.mantissa <= input_x_reg[2].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[2].in.input.exponent <= input_x_reg[2].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[2].in.input.sign <= input_x_reg[2].sign @[PipelineMac.scala 37:39]
    gen_pp_io[2].in.weight.exponent <= input_w_reg[2].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[2].in.weight.grps[0] <= input_w_reg[2].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[2].in.weight.grps[1] <= input_w_reg[2].grps[1] @[PipelineMac.scala 38:40]
    pp[2][0] <= gen_pp_io[2].out.pp_1 @[PipelineMac.scala 39:26]
    pp[2][1] <= gen_pp_io[2].out.pp_2 @[PipelineMac.scala 40:26]
    exp[2] <= gen_pp_io[2].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[3].in.input.mantissa <= input_x_reg[3].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[3].in.input.exponent <= input_x_reg[3].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[3].in.input.sign <= input_x_reg[3].sign @[PipelineMac.scala 37:39]
    gen_pp_io[3].in.weight.exponent <= input_w_reg[3].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[3].in.weight.grps[0] <= input_w_reg[3].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[3].in.weight.grps[1] <= input_w_reg[3].grps[1] @[PipelineMac.scala 38:40]
    pp[3][0] <= gen_pp_io[3].out.pp_1 @[PipelineMac.scala 39:26]
    pp[3][1] <= gen_pp_io[3].out.pp_2 @[PipelineMac.scala 40:26]
    exp[3] <= gen_pp_io[3].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[4].in.input.mantissa <= input_x_reg[4].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[4].in.input.exponent <= input_x_reg[4].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[4].in.input.sign <= input_x_reg[4].sign @[PipelineMac.scala 37:39]
    gen_pp_io[4].in.weight.exponent <= input_w_reg[4].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[4].in.weight.grps[0] <= input_w_reg[4].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[4].in.weight.grps[1] <= input_w_reg[4].grps[1] @[PipelineMac.scala 38:40]
    pp[4][0] <= gen_pp_io[4].out.pp_1 @[PipelineMac.scala 39:26]
    pp[4][1] <= gen_pp_io[4].out.pp_2 @[PipelineMac.scala 40:26]
    exp[4] <= gen_pp_io[4].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[5].in.input.mantissa <= input_x_reg[5].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[5].in.input.exponent <= input_x_reg[5].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[5].in.input.sign <= input_x_reg[5].sign @[PipelineMac.scala 37:39]
    gen_pp_io[5].in.weight.exponent <= input_w_reg[5].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[5].in.weight.grps[0] <= input_w_reg[5].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[5].in.weight.grps[1] <= input_w_reg[5].grps[1] @[PipelineMac.scala 38:40]
    pp[5][0] <= gen_pp_io[5].out.pp_1 @[PipelineMac.scala 39:26]
    pp[5][1] <= gen_pp_io[5].out.pp_2 @[PipelineMac.scala 40:26]
    exp[5] <= gen_pp_io[5].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[6].in.input.mantissa <= input_x_reg[6].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[6].in.input.exponent <= input_x_reg[6].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[6].in.input.sign <= input_x_reg[6].sign @[PipelineMac.scala 37:39]
    gen_pp_io[6].in.weight.exponent <= input_w_reg[6].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[6].in.weight.grps[0] <= input_w_reg[6].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[6].in.weight.grps[1] <= input_w_reg[6].grps[1] @[PipelineMac.scala 38:40]
    pp[6][0] <= gen_pp_io[6].out.pp_1 @[PipelineMac.scala 39:26]
    pp[6][1] <= gen_pp_io[6].out.pp_2 @[PipelineMac.scala 40:26]
    exp[6] <= gen_pp_io[6].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[7].in.input.mantissa <= input_x_reg[7].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[7].in.input.exponent <= input_x_reg[7].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[7].in.input.sign <= input_x_reg[7].sign @[PipelineMac.scala 37:39]
    gen_pp_io[7].in.weight.exponent <= input_w_reg[7].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[7].in.weight.grps[0] <= input_w_reg[7].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[7].in.weight.grps[1] <= input_w_reg[7].grps[1] @[PipelineMac.scala 38:40]
    pp[7][0] <= gen_pp_io[7].out.pp_1 @[PipelineMac.scala 39:26]
    pp[7][1] <= gen_pp_io[7].out.pp_2 @[PipelineMac.scala 40:26]
    exp[7] <= gen_pp_io[7].out.exponent @[PipelineMac.scala 41:24]
    gen_pp_io[8].in.input.mantissa <= input_x_reg[8].mantissa @[PipelineMac.scala 37:39]
    gen_pp_io[8].in.input.exponent <= input_x_reg[8].exponent @[PipelineMac.scala 37:39]
    gen_pp_io[8].in.input.sign <= input_x_reg[8].sign @[PipelineMac.scala 37:39]
    gen_pp_io[8].in.weight.exponent <= input_w_reg[8].exponent @[PipelineMac.scala 38:40]
    gen_pp_io[8].in.weight.grps[0] <= input_w_reg[8].grps[0] @[PipelineMac.scala 38:40]
    gen_pp_io[8].in.weight.grps[1] <= input_w_reg[8].grps[1] @[PipelineMac.scala 38:40]
    pp[8][0] <= gen_pp_io[8].out.pp_1 @[PipelineMac.scala 39:26]
    pp[8][1] <= gen_pp_io[8].out.pp_2 @[PipelineMac.scala 40:26]
    exp[8] <= gen_pp_io[8].out.exponent @[PipelineMac.scala 41:24]
    wire max_exp : UInt<9> @[PipelineMac.scala 45:27]
    inst Max_exp_determ of Max_exp_determ @[PipelineMac.scala 46:35]
    Max_exp_determ.clock <= clock
    Max_exp_determ.reset <= reset
    Max_exp_determ.io.in.skip <= skip_1_reg @[PipelineMac.scala 47:31]
    Max_exp_determ.io.in.exp[0] <= exp[0] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[1] <= exp[1] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[2] <= exp[2] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[3] <= exp[3] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[4] <= exp[4] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[5] <= exp[5] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[6] <= exp[6] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[7] <= exp[7] @[PipelineMac.scala 49:41]
    Max_exp_determ.io.in.exp[8] <= exp[8] @[PipelineMac.scala 49:41]
    max_exp <= Max_exp_determ.io.out.max_exp @[PipelineMac.scala 51:17]
    reg pp_reg : UInt<10>[2][9], clock @[PipelineMac.scala 54:25]
    reg exp_reg : UInt<9>[9], clock @[PipelineMac.scala 55:27]
    reg max_exp_reg : UInt<9>[9], clock @[PipelineMac.scala 56:31]
    reg skip_2_reg : UInt<9>, clock @[PipelineMac.scala 57:29]
    node _T_1510 = bits(skip_1_reg, 8, 8) @[PipelineMac.scala 59:47]
    node _T_1512 = eq(_T_1510, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1513 = mux(_T_1512, pp[0][0], pp_reg[0][0]) @[PipelineMac.scala 59:36]
    pp_reg[0][0] <= _T_1513 @[PipelineMac.scala 59:30]
    node _T_1514 = bits(skip_1_reg, 8, 8) @[PipelineMac.scala 60:47]
    node _T_1516 = eq(_T_1514, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1517 = mux(_T_1516, pp[0][0], pp_reg[0][0]) @[PipelineMac.scala 60:36]
    pp_reg[0][1] <= _T_1517 @[PipelineMac.scala 60:30]
    node _T_1518 = bits(skip_1_reg, 8, 8) @[PipelineMac.scala 61:45]
    node _T_1520 = eq(_T_1518, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1521 = mux(_T_1520, exp[0], exp_reg[0]) @[PipelineMac.scala 61:34]
    exp_reg[0] <= _T_1521 @[PipelineMac.scala 61:28]
    node _T_1522 = bits(skip_1_reg, 8, 8) @[PipelineMac.scala 62:49]
    node _T_1524 = eq(_T_1522, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1525 = mux(_T_1524, max_exp, max_exp_reg[0]) @[PipelineMac.scala 62:38]
    max_exp_reg[0] <= _T_1525 @[PipelineMac.scala 62:32]
    node _T_1526 = bits(skip_1_reg, 7, 7) @[PipelineMac.scala 59:47]
    node _T_1528 = eq(_T_1526, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1529 = mux(_T_1528, pp[1][0], pp_reg[1][0]) @[PipelineMac.scala 59:36]
    pp_reg[1][0] <= _T_1529 @[PipelineMac.scala 59:30]
    node _T_1530 = bits(skip_1_reg, 7, 7) @[PipelineMac.scala 60:47]
    node _T_1532 = eq(_T_1530, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1533 = mux(_T_1532, pp[1][0], pp_reg[1][0]) @[PipelineMac.scala 60:36]
    pp_reg[1][1] <= _T_1533 @[PipelineMac.scala 60:30]
    node _T_1534 = bits(skip_1_reg, 7, 7) @[PipelineMac.scala 61:45]
    node _T_1536 = eq(_T_1534, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1537 = mux(_T_1536, exp[1], exp_reg[1]) @[PipelineMac.scala 61:34]
    exp_reg[1] <= _T_1537 @[PipelineMac.scala 61:28]
    node _T_1538 = bits(skip_1_reg, 7, 7) @[PipelineMac.scala 62:49]
    node _T_1540 = eq(_T_1538, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1541 = mux(_T_1540, max_exp, max_exp_reg[1]) @[PipelineMac.scala 62:38]
    max_exp_reg[1] <= _T_1541 @[PipelineMac.scala 62:32]
    node _T_1542 = bits(skip_1_reg, 6, 6) @[PipelineMac.scala 59:47]
    node _T_1544 = eq(_T_1542, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1545 = mux(_T_1544, pp[2][0], pp_reg[2][0]) @[PipelineMac.scala 59:36]
    pp_reg[2][0] <= _T_1545 @[PipelineMac.scala 59:30]
    node _T_1546 = bits(skip_1_reg, 6, 6) @[PipelineMac.scala 60:47]
    node _T_1548 = eq(_T_1546, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1549 = mux(_T_1548, pp[2][0], pp_reg[2][0]) @[PipelineMac.scala 60:36]
    pp_reg[2][1] <= _T_1549 @[PipelineMac.scala 60:30]
    node _T_1550 = bits(skip_1_reg, 6, 6) @[PipelineMac.scala 61:45]
    node _T_1552 = eq(_T_1550, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1553 = mux(_T_1552, exp[2], exp_reg[2]) @[PipelineMac.scala 61:34]
    exp_reg[2] <= _T_1553 @[PipelineMac.scala 61:28]
    node _T_1554 = bits(skip_1_reg, 6, 6) @[PipelineMac.scala 62:49]
    node _T_1556 = eq(_T_1554, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1557 = mux(_T_1556, max_exp, max_exp_reg[2]) @[PipelineMac.scala 62:38]
    max_exp_reg[2] <= _T_1557 @[PipelineMac.scala 62:32]
    node _T_1558 = bits(skip_1_reg, 5, 5) @[PipelineMac.scala 59:47]
    node _T_1560 = eq(_T_1558, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1561 = mux(_T_1560, pp[3][0], pp_reg[3][0]) @[PipelineMac.scala 59:36]
    pp_reg[3][0] <= _T_1561 @[PipelineMac.scala 59:30]
    node _T_1562 = bits(skip_1_reg, 5, 5) @[PipelineMac.scala 60:47]
    node _T_1564 = eq(_T_1562, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1565 = mux(_T_1564, pp[3][0], pp_reg[3][0]) @[PipelineMac.scala 60:36]
    pp_reg[3][1] <= _T_1565 @[PipelineMac.scala 60:30]
    node _T_1566 = bits(skip_1_reg, 5, 5) @[PipelineMac.scala 61:45]
    node _T_1568 = eq(_T_1566, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1569 = mux(_T_1568, exp[3], exp_reg[3]) @[PipelineMac.scala 61:34]
    exp_reg[3] <= _T_1569 @[PipelineMac.scala 61:28]
    node _T_1570 = bits(skip_1_reg, 5, 5) @[PipelineMac.scala 62:49]
    node _T_1572 = eq(_T_1570, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1573 = mux(_T_1572, max_exp, max_exp_reg[3]) @[PipelineMac.scala 62:38]
    max_exp_reg[3] <= _T_1573 @[PipelineMac.scala 62:32]
    node _T_1574 = bits(skip_1_reg, 4, 4) @[PipelineMac.scala 59:47]
    node _T_1576 = eq(_T_1574, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1577 = mux(_T_1576, pp[4][0], pp_reg[4][0]) @[PipelineMac.scala 59:36]
    pp_reg[4][0] <= _T_1577 @[PipelineMac.scala 59:30]
    node _T_1578 = bits(skip_1_reg, 4, 4) @[PipelineMac.scala 60:47]
    node _T_1580 = eq(_T_1578, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1581 = mux(_T_1580, pp[4][0], pp_reg[4][0]) @[PipelineMac.scala 60:36]
    pp_reg[4][1] <= _T_1581 @[PipelineMac.scala 60:30]
    node _T_1582 = bits(skip_1_reg, 4, 4) @[PipelineMac.scala 61:45]
    node _T_1584 = eq(_T_1582, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1585 = mux(_T_1584, exp[4], exp_reg[4]) @[PipelineMac.scala 61:34]
    exp_reg[4] <= _T_1585 @[PipelineMac.scala 61:28]
    node _T_1586 = bits(skip_1_reg, 4, 4) @[PipelineMac.scala 62:49]
    node _T_1588 = eq(_T_1586, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1589 = mux(_T_1588, max_exp, max_exp_reg[4]) @[PipelineMac.scala 62:38]
    max_exp_reg[4] <= _T_1589 @[PipelineMac.scala 62:32]
    node _T_1590 = bits(skip_1_reg, 3, 3) @[PipelineMac.scala 59:47]
    node _T_1592 = eq(_T_1590, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1593 = mux(_T_1592, pp[5][0], pp_reg[5][0]) @[PipelineMac.scala 59:36]
    pp_reg[5][0] <= _T_1593 @[PipelineMac.scala 59:30]
    node _T_1594 = bits(skip_1_reg, 3, 3) @[PipelineMac.scala 60:47]
    node _T_1596 = eq(_T_1594, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1597 = mux(_T_1596, pp[5][0], pp_reg[5][0]) @[PipelineMac.scala 60:36]
    pp_reg[5][1] <= _T_1597 @[PipelineMac.scala 60:30]
    node _T_1598 = bits(skip_1_reg, 3, 3) @[PipelineMac.scala 61:45]
    node _T_1600 = eq(_T_1598, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1601 = mux(_T_1600, exp[5], exp_reg[5]) @[PipelineMac.scala 61:34]
    exp_reg[5] <= _T_1601 @[PipelineMac.scala 61:28]
    node _T_1602 = bits(skip_1_reg, 3, 3) @[PipelineMac.scala 62:49]
    node _T_1604 = eq(_T_1602, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1605 = mux(_T_1604, max_exp, max_exp_reg[5]) @[PipelineMac.scala 62:38]
    max_exp_reg[5] <= _T_1605 @[PipelineMac.scala 62:32]
    node _T_1606 = bits(skip_1_reg, 2, 2) @[PipelineMac.scala 59:47]
    node _T_1608 = eq(_T_1606, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1609 = mux(_T_1608, pp[6][0], pp_reg[6][0]) @[PipelineMac.scala 59:36]
    pp_reg[6][0] <= _T_1609 @[PipelineMac.scala 59:30]
    node _T_1610 = bits(skip_1_reg, 2, 2) @[PipelineMac.scala 60:47]
    node _T_1612 = eq(_T_1610, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1613 = mux(_T_1612, pp[6][0], pp_reg[6][0]) @[PipelineMac.scala 60:36]
    pp_reg[6][1] <= _T_1613 @[PipelineMac.scala 60:30]
    node _T_1614 = bits(skip_1_reg, 2, 2) @[PipelineMac.scala 61:45]
    node _T_1616 = eq(_T_1614, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1617 = mux(_T_1616, exp[6], exp_reg[6]) @[PipelineMac.scala 61:34]
    exp_reg[6] <= _T_1617 @[PipelineMac.scala 61:28]
    node _T_1618 = bits(skip_1_reg, 2, 2) @[PipelineMac.scala 62:49]
    node _T_1620 = eq(_T_1618, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1621 = mux(_T_1620, max_exp, max_exp_reg[6]) @[PipelineMac.scala 62:38]
    max_exp_reg[6] <= _T_1621 @[PipelineMac.scala 62:32]
    node _T_1622 = bits(skip_1_reg, 1, 1) @[PipelineMac.scala 59:47]
    node _T_1624 = eq(_T_1622, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1625 = mux(_T_1624, pp[7][0], pp_reg[7][0]) @[PipelineMac.scala 59:36]
    pp_reg[7][0] <= _T_1625 @[PipelineMac.scala 59:30]
    node _T_1626 = bits(skip_1_reg, 1, 1) @[PipelineMac.scala 60:47]
    node _T_1628 = eq(_T_1626, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1629 = mux(_T_1628, pp[7][0], pp_reg[7][0]) @[PipelineMac.scala 60:36]
    pp_reg[7][1] <= _T_1629 @[PipelineMac.scala 60:30]
    node _T_1630 = bits(skip_1_reg, 1, 1) @[PipelineMac.scala 61:45]
    node _T_1632 = eq(_T_1630, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1633 = mux(_T_1632, exp[7], exp_reg[7]) @[PipelineMac.scala 61:34]
    exp_reg[7] <= _T_1633 @[PipelineMac.scala 61:28]
    node _T_1634 = bits(skip_1_reg, 1, 1) @[PipelineMac.scala 62:49]
    node _T_1636 = eq(_T_1634, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1637 = mux(_T_1636, max_exp, max_exp_reg[7]) @[PipelineMac.scala 62:38]
    max_exp_reg[7] <= _T_1637 @[PipelineMac.scala 62:32]
    node _T_1638 = bits(skip_1_reg, 0, 0) @[PipelineMac.scala 59:47]
    node _T_1640 = eq(_T_1638, UInt<1>("h00")) @[PipelineMac.scala 59:53]
    node _T_1641 = mux(_T_1640, pp[8][0], pp_reg[8][0]) @[PipelineMac.scala 59:36]
    pp_reg[8][0] <= _T_1641 @[PipelineMac.scala 59:30]
    node _T_1642 = bits(skip_1_reg, 0, 0) @[PipelineMac.scala 60:47]
    node _T_1644 = eq(_T_1642, UInt<1>("h00")) @[PipelineMac.scala 60:53]
    node _T_1645 = mux(_T_1644, pp[8][0], pp_reg[8][0]) @[PipelineMac.scala 60:36]
    pp_reg[8][1] <= _T_1645 @[PipelineMac.scala 60:30]
    node _T_1646 = bits(skip_1_reg, 0, 0) @[PipelineMac.scala 61:45]
    node _T_1648 = eq(_T_1646, UInt<1>("h00")) @[PipelineMac.scala 61:51]
    node _T_1649 = mux(_T_1648, exp[8], exp_reg[8]) @[PipelineMac.scala 61:34]
    exp_reg[8] <= _T_1649 @[PipelineMac.scala 61:28]
    node _T_1650 = bits(skip_1_reg, 0, 0) @[PipelineMac.scala 62:49]
    node _T_1652 = eq(_T_1650, UInt<1>("h00")) @[PipelineMac.scala 62:55]
    node _T_1653 = mux(_T_1652, max_exp, max_exp_reg[8]) @[PipelineMac.scala 62:38]
    max_exp_reg[8] <= _T_1653 @[PipelineMac.scala 62:32]
    skip_2_reg <= skip_1_reg @[PipelineMac.scala 64:20]
    wire align_pp : UInt<24>[2][9] @[PipelineMac.scala 67:28]
    inst Align_CG2 of Align_CG2 @[PipelineMac.scala 69:46]
    Align_CG2.clock <= clock
    Align_CG2.reset <= reset
    inst Align_CG2_1 of Align_CG2_1 @[PipelineMac.scala 69:46]
    Align_CG2_1.clock <= clock
    Align_CG2_1.reset <= reset
    inst Align_CG2_2 of Align_CG2_2 @[PipelineMac.scala 69:46]
    Align_CG2_2.clock <= clock
    Align_CG2_2.reset <= reset
    inst Align_CG2_3 of Align_CG2_3 @[PipelineMac.scala 69:46]
    Align_CG2_3.clock <= clock
    Align_CG2_3.reset <= reset
    inst Align_CG2_4 of Align_CG2_4 @[PipelineMac.scala 69:46]
    Align_CG2_4.clock <= clock
    Align_CG2_4.reset <= reset
    inst Align_CG2_5 of Align_CG2_5 @[PipelineMac.scala 69:46]
    Align_CG2_5.clock <= clock
    Align_CG2_5.reset <= reset
    inst Align_CG2_6 of Align_CG2_6 @[PipelineMac.scala 69:46]
    Align_CG2_6.clock <= clock
    Align_CG2_6.reset <= reset
    inst Align_CG2_7 of Align_CG2_7 @[PipelineMac.scala 69:46]
    Align_CG2_7.clock <= clock
    Align_CG2_7.reset <= reset
    inst Align_CG2_8 of Align_CG2_8 @[PipelineMac.scala 69:46]
    Align_CG2_8.clock <= clock
    Align_CG2_8.reset <= reset
    wire align_pp_io : {in : {flip pp1 : UInt<10>, flip pp2 : UInt<10>, flip exp : UInt<9>, flip max_exp : UInt<9>}, out : {align_pp1 : UInt<24>, align_pp2 : UInt<24>}}[9] @[PipelineMac.scala 69:39]
    align_pp_io[0].out.align_pp2 <= Align_CG2.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[0].out.align_pp1 <= Align_CG2.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2.io.in.max_exp <= align_pp_io[0].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2.io.in.exp <= align_pp_io[0].in.exp @[PipelineMac.scala 69:39]
    Align_CG2.io.in.pp2 <= align_pp_io[0].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2.io.in.pp1 <= align_pp_io[0].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[1].out.align_pp2 <= Align_CG2_1.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[1].out.align_pp1 <= Align_CG2_1.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_1.io.in.max_exp <= align_pp_io[1].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_1.io.in.exp <= align_pp_io[1].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_1.io.in.pp2 <= align_pp_io[1].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_1.io.in.pp1 <= align_pp_io[1].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[2].out.align_pp2 <= Align_CG2_2.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[2].out.align_pp1 <= Align_CG2_2.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_2.io.in.max_exp <= align_pp_io[2].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_2.io.in.exp <= align_pp_io[2].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_2.io.in.pp2 <= align_pp_io[2].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_2.io.in.pp1 <= align_pp_io[2].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[3].out.align_pp2 <= Align_CG2_3.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[3].out.align_pp1 <= Align_CG2_3.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_3.io.in.max_exp <= align_pp_io[3].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_3.io.in.exp <= align_pp_io[3].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_3.io.in.pp2 <= align_pp_io[3].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_3.io.in.pp1 <= align_pp_io[3].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[4].out.align_pp2 <= Align_CG2_4.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[4].out.align_pp1 <= Align_CG2_4.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_4.io.in.max_exp <= align_pp_io[4].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_4.io.in.exp <= align_pp_io[4].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_4.io.in.pp2 <= align_pp_io[4].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_4.io.in.pp1 <= align_pp_io[4].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[5].out.align_pp2 <= Align_CG2_5.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[5].out.align_pp1 <= Align_CG2_5.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_5.io.in.max_exp <= align_pp_io[5].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_5.io.in.exp <= align_pp_io[5].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_5.io.in.pp2 <= align_pp_io[5].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_5.io.in.pp1 <= align_pp_io[5].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[6].out.align_pp2 <= Align_CG2_6.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[6].out.align_pp1 <= Align_CG2_6.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_6.io.in.max_exp <= align_pp_io[6].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_6.io.in.exp <= align_pp_io[6].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_6.io.in.pp2 <= align_pp_io[6].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_6.io.in.pp1 <= align_pp_io[6].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[7].out.align_pp2 <= Align_CG2_7.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[7].out.align_pp1 <= Align_CG2_7.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_7.io.in.max_exp <= align_pp_io[7].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_7.io.in.exp <= align_pp_io[7].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_7.io.in.pp2 <= align_pp_io[7].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_7.io.in.pp1 <= align_pp_io[7].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[8].out.align_pp2 <= Align_CG2_8.io.out.align_pp2 @[PipelineMac.scala 69:39]
    align_pp_io[8].out.align_pp1 <= Align_CG2_8.io.out.align_pp1 @[PipelineMac.scala 69:39]
    Align_CG2_8.io.in.max_exp <= align_pp_io[8].in.max_exp @[PipelineMac.scala 69:39]
    Align_CG2_8.io.in.exp <= align_pp_io[8].in.exp @[PipelineMac.scala 69:39]
    Align_CG2_8.io.in.pp2 <= align_pp_io[8].in.pp2 @[PipelineMac.scala 69:39]
    Align_CG2_8.io.in.pp1 <= align_pp_io[8].in.pp1 @[PipelineMac.scala 69:39]
    align_pp_io[0].in.pp1 <= pp_reg[0][0] @[PipelineMac.scala 71:39]
    align_pp_io[0].in.pp2 <= pp_reg[0][1] @[PipelineMac.scala 72:39]
    align_pp_io[0].in.exp <= exp_reg[0] @[PipelineMac.scala 73:39]
    align_pp_io[0].in.max_exp <= max_exp_reg[0] @[PipelineMac.scala 74:43]
    align_pp[0][0] <= align_pp_io[0].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[0][1] <= align_pp_io[0].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[1].in.pp1 <= pp_reg[1][0] @[PipelineMac.scala 71:39]
    align_pp_io[1].in.pp2 <= pp_reg[1][1] @[PipelineMac.scala 72:39]
    align_pp_io[1].in.exp <= exp_reg[1] @[PipelineMac.scala 73:39]
    align_pp_io[1].in.max_exp <= max_exp_reg[1] @[PipelineMac.scala 74:43]
    align_pp[1][0] <= align_pp_io[1].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[1][1] <= align_pp_io[1].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[2].in.pp1 <= pp_reg[2][0] @[PipelineMac.scala 71:39]
    align_pp_io[2].in.pp2 <= pp_reg[2][1] @[PipelineMac.scala 72:39]
    align_pp_io[2].in.exp <= exp_reg[2] @[PipelineMac.scala 73:39]
    align_pp_io[2].in.max_exp <= max_exp_reg[2] @[PipelineMac.scala 74:43]
    align_pp[2][0] <= align_pp_io[2].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[2][1] <= align_pp_io[2].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[3].in.pp1 <= pp_reg[3][0] @[PipelineMac.scala 71:39]
    align_pp_io[3].in.pp2 <= pp_reg[3][1] @[PipelineMac.scala 72:39]
    align_pp_io[3].in.exp <= exp_reg[3] @[PipelineMac.scala 73:39]
    align_pp_io[3].in.max_exp <= max_exp_reg[3] @[PipelineMac.scala 74:43]
    align_pp[3][0] <= align_pp_io[3].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[3][1] <= align_pp_io[3].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[4].in.pp1 <= pp_reg[4][0] @[PipelineMac.scala 71:39]
    align_pp_io[4].in.pp2 <= pp_reg[4][1] @[PipelineMac.scala 72:39]
    align_pp_io[4].in.exp <= exp_reg[4] @[PipelineMac.scala 73:39]
    align_pp_io[4].in.max_exp <= max_exp_reg[4] @[PipelineMac.scala 74:43]
    align_pp[4][0] <= align_pp_io[4].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[4][1] <= align_pp_io[4].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[5].in.pp1 <= pp_reg[5][0] @[PipelineMac.scala 71:39]
    align_pp_io[5].in.pp2 <= pp_reg[5][1] @[PipelineMac.scala 72:39]
    align_pp_io[5].in.exp <= exp_reg[5] @[PipelineMac.scala 73:39]
    align_pp_io[5].in.max_exp <= max_exp_reg[5] @[PipelineMac.scala 74:43]
    align_pp[5][0] <= align_pp_io[5].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[5][1] <= align_pp_io[5].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[6].in.pp1 <= pp_reg[6][0] @[PipelineMac.scala 71:39]
    align_pp_io[6].in.pp2 <= pp_reg[6][1] @[PipelineMac.scala 72:39]
    align_pp_io[6].in.exp <= exp_reg[6] @[PipelineMac.scala 73:39]
    align_pp_io[6].in.max_exp <= max_exp_reg[6] @[PipelineMac.scala 74:43]
    align_pp[6][0] <= align_pp_io[6].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[6][1] <= align_pp_io[6].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[7].in.pp1 <= pp_reg[7][0] @[PipelineMac.scala 71:39]
    align_pp_io[7].in.pp2 <= pp_reg[7][1] @[PipelineMac.scala 72:39]
    align_pp_io[7].in.exp <= exp_reg[7] @[PipelineMac.scala 73:39]
    align_pp_io[7].in.max_exp <= max_exp_reg[7] @[PipelineMac.scala 74:43]
    align_pp[7][0] <= align_pp_io[7].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[7][1] <= align_pp_io[7].out.align_pp2 @[PipelineMac.scala 76:32]
    align_pp_io[8].in.pp1 <= pp_reg[8][0] @[PipelineMac.scala 71:39]
    align_pp_io[8].in.pp2 <= pp_reg[8][1] @[PipelineMac.scala 72:39]
    align_pp_io[8].in.exp <= exp_reg[8] @[PipelineMac.scala 73:39]
    align_pp_io[8].in.max_exp <= max_exp_reg[8] @[PipelineMac.scala 74:43]
    align_pp[8][0] <= align_pp_io[8].out.align_pp1 @[PipelineMac.scala 75:32]
    align_pp[8][1] <= align_pp_io[8].out.align_pp2 @[PipelineMac.scala 76:32]
    wire sign_result : UInt<6> @[PipelineMac.scala 80:31]
    reg skip_3_reg : UInt<9>, clock @[PipelineMac.scala 81:29]
    reg max_exp_reg_2 : UInt<9>, clock @[PipelineMac.scala 82:32]
    inst SignAdder of SignAdder @[PipelineMac.scala 83:35]
    SignAdder.clock <= clock
    SignAdder.reset <= reset
    node _T_2023 = bits(skip_2_reg, 8, 8) @[PipelineMac.scala 85:54]
    node _T_2024 = not(_T_2023) @[PipelineMac.scala 85:43]
    node _T_2025 = bits(align_pp[0][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2026 = and(_T_2024, _T_2025) @[PipelineMac.scala 85:59]
    SignAdder.io.in[0][0] <= _T_2026 @[PipelineMac.scala 85:40]
    node _T_2027 = bits(skip_2_reg, 8, 8) @[PipelineMac.scala 86:54]
    node _T_2028 = not(_T_2027) @[PipelineMac.scala 86:43]
    node _T_2029 = bits(align_pp[0][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2030 = and(_T_2028, _T_2029) @[PipelineMac.scala 86:59]
    SignAdder.io.in[0][1] <= _T_2030 @[PipelineMac.scala 86:40]
    node _T_2031 = bits(skip_2_reg, 7, 7) @[PipelineMac.scala 85:54]
    node _T_2032 = not(_T_2031) @[PipelineMac.scala 85:43]
    node _T_2033 = bits(align_pp[1][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2034 = and(_T_2032, _T_2033) @[PipelineMac.scala 85:59]
    SignAdder.io.in[1][0] <= _T_2034 @[PipelineMac.scala 85:40]
    node _T_2035 = bits(skip_2_reg, 7, 7) @[PipelineMac.scala 86:54]
    node _T_2036 = not(_T_2035) @[PipelineMac.scala 86:43]
    node _T_2037 = bits(align_pp[1][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2038 = and(_T_2036, _T_2037) @[PipelineMac.scala 86:59]
    SignAdder.io.in[1][1] <= _T_2038 @[PipelineMac.scala 86:40]
    node _T_2039 = bits(skip_2_reg, 6, 6) @[PipelineMac.scala 85:54]
    node _T_2040 = not(_T_2039) @[PipelineMac.scala 85:43]
    node _T_2041 = bits(align_pp[2][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2042 = and(_T_2040, _T_2041) @[PipelineMac.scala 85:59]
    SignAdder.io.in[2][0] <= _T_2042 @[PipelineMac.scala 85:40]
    node _T_2043 = bits(skip_2_reg, 6, 6) @[PipelineMac.scala 86:54]
    node _T_2044 = not(_T_2043) @[PipelineMac.scala 86:43]
    node _T_2045 = bits(align_pp[2][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2046 = and(_T_2044, _T_2045) @[PipelineMac.scala 86:59]
    SignAdder.io.in[2][1] <= _T_2046 @[PipelineMac.scala 86:40]
    node _T_2047 = bits(skip_2_reg, 5, 5) @[PipelineMac.scala 85:54]
    node _T_2048 = not(_T_2047) @[PipelineMac.scala 85:43]
    node _T_2049 = bits(align_pp[3][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2050 = and(_T_2048, _T_2049) @[PipelineMac.scala 85:59]
    SignAdder.io.in[3][0] <= _T_2050 @[PipelineMac.scala 85:40]
    node _T_2051 = bits(skip_2_reg, 5, 5) @[PipelineMac.scala 86:54]
    node _T_2052 = not(_T_2051) @[PipelineMac.scala 86:43]
    node _T_2053 = bits(align_pp[3][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2054 = and(_T_2052, _T_2053) @[PipelineMac.scala 86:59]
    SignAdder.io.in[3][1] <= _T_2054 @[PipelineMac.scala 86:40]
    node _T_2055 = bits(skip_2_reg, 4, 4) @[PipelineMac.scala 85:54]
    node _T_2056 = not(_T_2055) @[PipelineMac.scala 85:43]
    node _T_2057 = bits(align_pp[4][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2058 = and(_T_2056, _T_2057) @[PipelineMac.scala 85:59]
    SignAdder.io.in[4][0] <= _T_2058 @[PipelineMac.scala 85:40]
    node _T_2059 = bits(skip_2_reg, 4, 4) @[PipelineMac.scala 86:54]
    node _T_2060 = not(_T_2059) @[PipelineMac.scala 86:43]
    node _T_2061 = bits(align_pp[4][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2062 = and(_T_2060, _T_2061) @[PipelineMac.scala 86:59]
    SignAdder.io.in[4][1] <= _T_2062 @[PipelineMac.scala 86:40]
    node _T_2063 = bits(skip_2_reg, 3, 3) @[PipelineMac.scala 85:54]
    node _T_2064 = not(_T_2063) @[PipelineMac.scala 85:43]
    node _T_2065 = bits(align_pp[5][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2066 = and(_T_2064, _T_2065) @[PipelineMac.scala 85:59]
    SignAdder.io.in[5][0] <= _T_2066 @[PipelineMac.scala 85:40]
    node _T_2067 = bits(skip_2_reg, 3, 3) @[PipelineMac.scala 86:54]
    node _T_2068 = not(_T_2067) @[PipelineMac.scala 86:43]
    node _T_2069 = bits(align_pp[5][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2070 = and(_T_2068, _T_2069) @[PipelineMac.scala 86:59]
    SignAdder.io.in[5][1] <= _T_2070 @[PipelineMac.scala 86:40]
    node _T_2071 = bits(skip_2_reg, 2, 2) @[PipelineMac.scala 85:54]
    node _T_2072 = not(_T_2071) @[PipelineMac.scala 85:43]
    node _T_2073 = bits(align_pp[6][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2074 = and(_T_2072, _T_2073) @[PipelineMac.scala 85:59]
    SignAdder.io.in[6][0] <= _T_2074 @[PipelineMac.scala 85:40]
    node _T_2075 = bits(skip_2_reg, 2, 2) @[PipelineMac.scala 86:54]
    node _T_2076 = not(_T_2075) @[PipelineMac.scala 86:43]
    node _T_2077 = bits(align_pp[6][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2078 = and(_T_2076, _T_2077) @[PipelineMac.scala 86:59]
    SignAdder.io.in[6][1] <= _T_2078 @[PipelineMac.scala 86:40]
    node _T_2079 = bits(skip_2_reg, 1, 1) @[PipelineMac.scala 85:54]
    node _T_2080 = not(_T_2079) @[PipelineMac.scala 85:43]
    node _T_2081 = bits(align_pp[7][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2082 = and(_T_2080, _T_2081) @[PipelineMac.scala 85:59]
    SignAdder.io.in[7][0] <= _T_2082 @[PipelineMac.scala 85:40]
    node _T_2083 = bits(skip_2_reg, 1, 1) @[PipelineMac.scala 86:54]
    node _T_2084 = not(_T_2083) @[PipelineMac.scala 86:43]
    node _T_2085 = bits(align_pp[7][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2086 = and(_T_2084, _T_2085) @[PipelineMac.scala 86:59]
    SignAdder.io.in[7][1] <= _T_2086 @[PipelineMac.scala 86:40]
    node _T_2087 = bits(skip_2_reg, 0, 0) @[PipelineMac.scala 85:54]
    node _T_2088 = not(_T_2087) @[PipelineMac.scala 85:43]
    node _T_2089 = bits(align_pp[8][0], 23, 23) @[PipelineMac.scala 85:74]
    node _T_2090 = and(_T_2088, _T_2089) @[PipelineMac.scala 85:59]
    SignAdder.io.in[8][0] <= _T_2090 @[PipelineMac.scala 85:40]
    node _T_2091 = bits(skip_2_reg, 0, 0) @[PipelineMac.scala 86:54]
    node _T_2092 = not(_T_2091) @[PipelineMac.scala 86:43]
    node _T_2093 = bits(align_pp[8][1], 23, 23) @[PipelineMac.scala 86:74]
    node _T_2094 = and(_T_2092, _T_2093) @[PipelineMac.scala 86:59]
    SignAdder.io.in[8][1] <= _T_2094 @[PipelineMac.scala 86:40]
    sign_result <= SignAdder.io.out @[PipelineMac.scala 88:21]
    reg align_pp_reg : UInt<24>[2][9], clock @[PipelineMac.scala 91:31]
    reg sign_result_reg : UInt<6>, clock @[PipelineMac.scala 92:34]
    node _T_2262 = bits(skip_2_reg, 8, 8) @[PipelineMac.scala 94:53]
    node _T_2264 = eq(_T_2262, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2265 = mux(_T_2264, align_pp[0][0], align_pp_reg[0][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[0][0] <= _T_2265 @[PipelineMac.scala 94:36]
    node _T_2266 = bits(skip_2_reg, 8, 8) @[PipelineMac.scala 95:53]
    node _T_2268 = eq(_T_2266, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2269 = mux(_T_2268, align_pp[0][1], align_pp_reg[0][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[0][1] <= _T_2269 @[PipelineMac.scala 95:36]
    node _T_2270 = bits(skip_2_reg, 7, 7) @[PipelineMac.scala 94:53]
    node _T_2272 = eq(_T_2270, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2273 = mux(_T_2272, align_pp[1][0], align_pp_reg[1][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[1][0] <= _T_2273 @[PipelineMac.scala 94:36]
    node _T_2274 = bits(skip_2_reg, 7, 7) @[PipelineMac.scala 95:53]
    node _T_2276 = eq(_T_2274, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2277 = mux(_T_2276, align_pp[1][1], align_pp_reg[1][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[1][1] <= _T_2277 @[PipelineMac.scala 95:36]
    node _T_2278 = bits(skip_2_reg, 6, 6) @[PipelineMac.scala 94:53]
    node _T_2280 = eq(_T_2278, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2281 = mux(_T_2280, align_pp[2][0], align_pp_reg[2][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[2][0] <= _T_2281 @[PipelineMac.scala 94:36]
    node _T_2282 = bits(skip_2_reg, 6, 6) @[PipelineMac.scala 95:53]
    node _T_2284 = eq(_T_2282, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2285 = mux(_T_2284, align_pp[2][1], align_pp_reg[2][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[2][1] <= _T_2285 @[PipelineMac.scala 95:36]
    node _T_2286 = bits(skip_2_reg, 5, 5) @[PipelineMac.scala 94:53]
    node _T_2288 = eq(_T_2286, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2289 = mux(_T_2288, align_pp[3][0], align_pp_reg[3][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[3][0] <= _T_2289 @[PipelineMac.scala 94:36]
    node _T_2290 = bits(skip_2_reg, 5, 5) @[PipelineMac.scala 95:53]
    node _T_2292 = eq(_T_2290, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2293 = mux(_T_2292, align_pp[3][1], align_pp_reg[3][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[3][1] <= _T_2293 @[PipelineMac.scala 95:36]
    node _T_2294 = bits(skip_2_reg, 4, 4) @[PipelineMac.scala 94:53]
    node _T_2296 = eq(_T_2294, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2297 = mux(_T_2296, align_pp[4][0], align_pp_reg[4][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[4][0] <= _T_2297 @[PipelineMac.scala 94:36]
    node _T_2298 = bits(skip_2_reg, 4, 4) @[PipelineMac.scala 95:53]
    node _T_2300 = eq(_T_2298, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2301 = mux(_T_2300, align_pp[4][1], align_pp_reg[4][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[4][1] <= _T_2301 @[PipelineMac.scala 95:36]
    node _T_2302 = bits(skip_2_reg, 3, 3) @[PipelineMac.scala 94:53]
    node _T_2304 = eq(_T_2302, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2305 = mux(_T_2304, align_pp[5][0], align_pp_reg[5][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[5][0] <= _T_2305 @[PipelineMac.scala 94:36]
    node _T_2306 = bits(skip_2_reg, 3, 3) @[PipelineMac.scala 95:53]
    node _T_2308 = eq(_T_2306, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2309 = mux(_T_2308, align_pp[5][1], align_pp_reg[5][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[5][1] <= _T_2309 @[PipelineMac.scala 95:36]
    node _T_2310 = bits(skip_2_reg, 2, 2) @[PipelineMac.scala 94:53]
    node _T_2312 = eq(_T_2310, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2313 = mux(_T_2312, align_pp[6][0], align_pp_reg[6][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[6][0] <= _T_2313 @[PipelineMac.scala 94:36]
    node _T_2314 = bits(skip_2_reg, 2, 2) @[PipelineMac.scala 95:53]
    node _T_2316 = eq(_T_2314, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2317 = mux(_T_2316, align_pp[6][1], align_pp_reg[6][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[6][1] <= _T_2317 @[PipelineMac.scala 95:36]
    node _T_2318 = bits(skip_2_reg, 1, 1) @[PipelineMac.scala 94:53]
    node _T_2320 = eq(_T_2318, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2321 = mux(_T_2320, align_pp[7][0], align_pp_reg[7][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[7][0] <= _T_2321 @[PipelineMac.scala 94:36]
    node _T_2322 = bits(skip_2_reg, 1, 1) @[PipelineMac.scala 95:53]
    node _T_2324 = eq(_T_2322, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2325 = mux(_T_2324, align_pp[7][1], align_pp_reg[7][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[7][1] <= _T_2325 @[PipelineMac.scala 95:36]
    node _T_2326 = bits(skip_2_reg, 0, 0) @[PipelineMac.scala 94:53]
    node _T_2328 = eq(_T_2326, UInt<1>("h00")) @[PipelineMac.scala 94:58]
    node _T_2329 = mux(_T_2328, align_pp[8][0], align_pp_reg[8][0]) @[PipelineMac.scala 94:42]
    align_pp_reg[8][0] <= _T_2329 @[PipelineMac.scala 94:36]
    node _T_2330 = bits(skip_2_reg, 0, 0) @[PipelineMac.scala 95:53]
    node _T_2332 = eq(_T_2330, UInt<1>("h00")) @[PipelineMac.scala 95:58]
    node _T_2333 = mux(_T_2332, align_pp[8][1], align_pp_reg[8][1]) @[PipelineMac.scala 95:42]
    align_pp_reg[8][1] <= _T_2333 @[PipelineMac.scala 95:36]
    sign_result_reg <= sign_result @[PipelineMac.scala 97:25]
    max_exp_reg_2 <= max_exp_reg[0] @[PipelineMac.scala 98:23]
    skip_3_reg <= skip_2_reg @[PipelineMac.scala 99:20]
    wire align_pp_tree : UInt<24>[2][9] @[PipelineMac.scala 102:33]
    inst treeadder of treeadder @[PipelineMac.scala 103:35]
    treeadder.clock <= clock
    treeadder.reset <= reset
    wire out : UInt<28> @[PipelineMac.scala 104:23]
    node _T_2501 = bits(skip_3_reg, 8, 8) @[PipelineMac.scala 106:54]
    node _T_2503 = mux(_T_2501, align_pp_reg[0][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[0][0] <= _T_2503 @[PipelineMac.scala 106:37]
    node _T_2504 = bits(skip_3_reg, 8, 8) @[PipelineMac.scala 107:54]
    node _T_2506 = mux(_T_2504, align_pp_reg[0][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[0][1] <= _T_2506 @[PipelineMac.scala 107:37]
    node _T_2507 = bits(skip_3_reg, 7, 7) @[PipelineMac.scala 106:54]
    node _T_2509 = mux(_T_2507, align_pp_reg[1][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[1][0] <= _T_2509 @[PipelineMac.scala 106:37]
    node _T_2510 = bits(skip_3_reg, 7, 7) @[PipelineMac.scala 107:54]
    node _T_2512 = mux(_T_2510, align_pp_reg[1][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[1][1] <= _T_2512 @[PipelineMac.scala 107:37]
    node _T_2513 = bits(skip_3_reg, 6, 6) @[PipelineMac.scala 106:54]
    node _T_2515 = mux(_T_2513, align_pp_reg[2][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[2][0] <= _T_2515 @[PipelineMac.scala 106:37]
    node _T_2516 = bits(skip_3_reg, 6, 6) @[PipelineMac.scala 107:54]
    node _T_2518 = mux(_T_2516, align_pp_reg[2][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[2][1] <= _T_2518 @[PipelineMac.scala 107:37]
    node _T_2519 = bits(skip_3_reg, 5, 5) @[PipelineMac.scala 106:54]
    node _T_2521 = mux(_T_2519, align_pp_reg[3][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[3][0] <= _T_2521 @[PipelineMac.scala 106:37]
    node _T_2522 = bits(skip_3_reg, 5, 5) @[PipelineMac.scala 107:54]
    node _T_2524 = mux(_T_2522, align_pp_reg[3][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[3][1] <= _T_2524 @[PipelineMac.scala 107:37]
    node _T_2525 = bits(skip_3_reg, 4, 4) @[PipelineMac.scala 106:54]
    node _T_2527 = mux(_T_2525, align_pp_reg[4][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[4][0] <= _T_2527 @[PipelineMac.scala 106:37]
    node _T_2528 = bits(skip_3_reg, 4, 4) @[PipelineMac.scala 107:54]
    node _T_2530 = mux(_T_2528, align_pp_reg[4][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[4][1] <= _T_2530 @[PipelineMac.scala 107:37]
    node _T_2531 = bits(skip_3_reg, 3, 3) @[PipelineMac.scala 106:54]
    node _T_2533 = mux(_T_2531, align_pp_reg[5][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[5][0] <= _T_2533 @[PipelineMac.scala 106:37]
    node _T_2534 = bits(skip_3_reg, 3, 3) @[PipelineMac.scala 107:54]
    node _T_2536 = mux(_T_2534, align_pp_reg[5][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[5][1] <= _T_2536 @[PipelineMac.scala 107:37]
    node _T_2537 = bits(skip_3_reg, 2, 2) @[PipelineMac.scala 106:54]
    node _T_2539 = mux(_T_2537, align_pp_reg[6][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[6][0] <= _T_2539 @[PipelineMac.scala 106:37]
    node _T_2540 = bits(skip_3_reg, 2, 2) @[PipelineMac.scala 107:54]
    node _T_2542 = mux(_T_2540, align_pp_reg[6][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[6][1] <= _T_2542 @[PipelineMac.scala 107:37]
    node _T_2543 = bits(skip_3_reg, 1, 1) @[PipelineMac.scala 106:54]
    node _T_2545 = mux(_T_2543, align_pp_reg[7][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[7][0] <= _T_2545 @[PipelineMac.scala 106:37]
    node _T_2546 = bits(skip_3_reg, 1, 1) @[PipelineMac.scala 107:54]
    node _T_2548 = mux(_T_2546, align_pp_reg[7][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[7][1] <= _T_2548 @[PipelineMac.scala 107:37]
    node _T_2549 = bits(skip_3_reg, 0, 0) @[PipelineMac.scala 106:54]
    node _T_2551 = mux(_T_2549, align_pp_reg[8][0], UInt<24>("h00")) @[PipelineMac.scala 106:43]
    align_pp_tree[8][0] <= _T_2551 @[PipelineMac.scala 106:37]
    node _T_2552 = bits(skip_3_reg, 0, 0) @[PipelineMac.scala 107:54]
    node _T_2554 = mux(_T_2552, align_pp_reg[8][1], UInt<24>("h00")) @[PipelineMac.scala 107:43]
    align_pp_tree[8][1] <= _T_2554 @[PipelineMac.scala 107:37]
    out <= treeadder.io.out @[PipelineMac.scala 110:13]
    treeadder.io.in[0] <= align_pp_tree[0][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[1] <= align_pp_tree[0][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[2] <= align_pp_tree[1][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[3] <= align_pp_tree[1][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[4] <= align_pp_tree[2][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[5] <= align_pp_tree[2][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[6] <= align_pp_tree[3][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[7] <= align_pp_tree[3][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[8] <= align_pp_tree[4][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[9] <= align_pp_tree[4][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[10] <= align_pp_tree[5][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[11] <= align_pp_tree[5][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[12] <= align_pp_tree[6][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[13] <= align_pp_tree[6][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[14] <= align_pp_tree[7][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[15] <= align_pp_tree[7][1] @[PipelineMac.scala 113:41]
    treeadder.io.in[16] <= align_pp_tree[8][0] @[PipelineMac.scala 112:39]
    treeadder.io.in[17] <= align_pp_tree[8][1] @[PipelineMac.scala 113:41]
    wire skip_4 : UInt<1> @[PipelineMac.scala 116:26]
    node _T_2556 = not(skip_3_reg) @[PipelineMac.scala 117:30]
    node _T_2558 = eq(_T_2556, UInt<1>("h00")) @[PipelineMac.scala 117:30]
    skip_4 <= _T_2558 @[PipelineMac.scala 117:16]
    reg skip_4_reg : UInt<1>, clock @[PipelineMac.scala 120:29]
    reg out_reg : UInt<28>, clock @[PipelineMac.scala 121:26]
    reg max_exp_reg_3 : UInt<9>, clock @[PipelineMac.scala 122:32]
    node _T_2563 = eq(skip_4, UInt<1>("h00")) @[PipelineMac.scala 123:31]
    node _T_2564 = mux(_T_2563, out, out_reg) @[PipelineMac.scala 123:23]
    out_reg <= _T_2564 @[PipelineMac.scala 123:17]
    max_exp_reg_3 <= max_exp_reg_2 @[PipelineMac.scala 124:23]
    skip_4_reg <= skip_4 @[PipelineMac.scala 125:20]
    wire norm_sum : UInt<23> @[PipelineMac.scala 128:28]
    wire exp_diff : UInt<8> @[PipelineMac.scala 129:28]
    wire sign : UInt<1> @[PipelineMac.scala 130:24]
    inst final_norm_noSUB of final_norm_noSUB @[PipelineMac.scala 131:29]
    final_norm_noSUB.clock <= clock
    final_norm_noSUB.reset <= reset
    final_norm_noSUB.io.input_exp <= max_exp_reg_3 @[PipelineMac.scala 132:27]
    final_norm_noSUB.io.PP_sum <= out_reg @[PipelineMac.scala 133:24]
    norm_sum <= final_norm_noSUB.io.norm_sum @[PipelineMac.scala 134:18]
    exp_diff <= final_norm_noSUB.io.norm_exp @[PipelineMac.scala 135:18]
    sign <= final_norm_noSUB.io.sign @[PipelineMac.scala 136:14]
    wire skip_5 : UInt<1> @[PipelineMac.scala 138:26]
    node _T_2570 = eq(skip_4_reg, UInt<1>("h01")) @[PipelineMac.scala 139:34]
    node _T_2573 = mux(_T_2570, UInt<1>("h01"), UInt<1>("h00")) @[PipelineMac.scala 139:22]
    skip_5 <= _T_2573 @[PipelineMac.scala 139:16]
    reg norm_sum_reg : UInt<23>, clock @[PipelineMac.scala 142:31]
    reg exp_diff_reg : UInt<8>, clock @[PipelineMac.scala 143:31]
    reg max_exp_reg_4 : UInt<9>, clock @[PipelineMac.scala 144:32]
    reg sign_reg : UInt<1>, clock @[PipelineMac.scala 145:27]
    reg skip_5_reg : UInt<1>, clock @[PipelineMac.scala 146:29]
    node _T_2580 = eq(skip_4_reg, UInt<1>("h00")) @[PipelineMac.scala 147:40]
    node _T_2581 = mux(_T_2580, norm_sum, norm_sum_reg) @[PipelineMac.scala 147:28]
    norm_sum_reg <= _T_2581 @[PipelineMac.scala 147:22]
    node _T_2583 = eq(skip_4_reg, UInt<1>("h00")) @[PipelineMac.scala 148:40]
    node _T_2584 = mux(_T_2583, exp_diff, exp_diff_reg) @[PipelineMac.scala 148:28]
    exp_diff_reg <= _T_2584 @[PipelineMac.scala 148:22]
    node _T_2586 = eq(skip_4_reg, UInt<1>("h00")) @[PipelineMac.scala 149:41]
    node _T_2587 = mux(_T_2586, max_exp_reg_3, max_exp_reg_4) @[PipelineMac.scala 149:29]
    max_exp_reg_4 <= _T_2587 @[PipelineMac.scala 149:23]
    node _T_2589 = eq(skip_4_reg, UInt<1>("h00")) @[PipelineMac.scala 150:36]
    node _T_2590 = mux(_T_2589, sign, sign_reg) @[PipelineMac.scala 150:24]
    sign_reg <= _T_2590 @[PipelineMac.scala 150:18]
    skip_5_reg <= skip_5 @[PipelineMac.scala 151:20]
    wire mac_output_tmp : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<23>} @[PipelineMac.scala 153:34]
    wire exp_tmp : UInt<9> @[PipelineMac.scala 154:27]
    node _T_2593 = sub(max_exp_reg_4, exp_diff_reg) @[PipelineMac.scala 155:34]
    node _T_2594 = asUInt(_T_2593) @[PipelineMac.scala 155:34]
    node _T_2595 = tail(_T_2594, 1) @[PipelineMac.scala 155:34]
    node _T_2597 = sub(_T_2595, UInt<9>("h076")) @[PipelineMac.scala 155:49]
    node _T_2598 = asUInt(_T_2597) @[PipelineMac.scala 155:49]
    node _T_2599 = tail(_T_2598, 1) @[PipelineMac.scala 155:49]
    exp_tmp <= _T_2599 @[PipelineMac.scala 155:17]
    node _T_2601 = eq(skip_5_reg, UInt<1>("h00")) @[PipelineMac.scala 156:47]
    node _T_2603 = mux(_T_2601, sign_reg, UInt<1>("h00")) @[PipelineMac.scala 156:35]
    mac_output_tmp.sign <= _T_2603 @[PipelineMac.scala 156:29]
    node _T_2605 = eq(skip_5_reg, UInt<1>("h00")) @[PipelineMac.scala 157:51]
    node _T_2607 = mux(_T_2605, norm_sum_reg, UInt<23>("h00")) @[PipelineMac.scala 157:39]
    mac_output_tmp.mantissa <= _T_2607 @[PipelineMac.scala 157:33]
    node _T_2609 = eq(skip_5_reg, UInt<1>("h00")) @[PipelineMac.scala 158:51]
    node _T_2610 = bits(exp_tmp, 7, 0) @[PipelineMac.scala 158:72]
    node _T_2612 = mux(_T_2609, _T_2610, UInt<8>("h00")) @[PipelineMac.scala 158:39]
    mac_output_tmp.exponent <= _T_2612 @[PipelineMac.scala 158:33]
    reg mac_output_reg : {sign : UInt<1>, exponent : UInt<8>, mantissa : UInt<23>}, clock @[PipelineMac.scala 159:33]
    mac_output_reg.mantissa <= mac_output_tmp.mantissa @[PipelineMac.scala 160:24]
    mac_output_reg.exponent <= mac_output_tmp.exponent @[PipelineMac.scala 160:24]
    mac_output_reg.sign <= mac_output_tmp.sign @[PipelineMac.scala 160:24]
    io.out.mantissa <= mac_output_reg.mantissa @[PipelineMac.scala 161:16]
    io.out.exponent <= mac_output_reg.exponent @[PipelineMac.scala 161:16]
    io.out.sign <= mac_output_reg.sign @[PipelineMac.scala 161:16]
    
